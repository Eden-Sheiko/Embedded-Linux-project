
no_os_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006150  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006428  08006428  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006430  08006430  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000070  080064a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  080064a8  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001340a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0c  00000000  00000000  000334aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000360b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a2d  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012200  00000000  00000000  0005f74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecce4  00000000  00000000  0007194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004408  00000000  00000000  0015e684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006308 	.word	0x08006308

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006308 	.word	0x08006308

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800068c:	f7ff ff92 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000690:	f7ff ffb6 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fe1d 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f812 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f978 	bl	8000990 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 f918 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a4:	f000 f946 	bl	8000934 <MX_USB_OTG_FS_PCD_Init>
  MX_LPTIM1_Init();
 80006a8:	f000 f872 	bl	8000790 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006ac:	f000 f8b2 	bl	8000814 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f8e0 	bl	8000874 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80006b4:	f000 f89a 	bl	80007ec <MX_RNG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80006b8:	f004 fd46 	bl	8005148 <rtg_main>
 80006bc:	e7fc      	b.n	80006b8 <main+0x30>
	...

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fe84 	bl	80053dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e4:	f001 fbd8 	bl	8001e98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemClock_Config+0xc8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <SystemClock_Config+0xcc>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000734:	2348      	movs	r3, #72	; 0x48
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800073c:	2303      	movs	r3, #3
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fbb7 	bl	8001eb8 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fa38 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fe45 	bl	8002400 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fa22 	bl	8000bc4 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_LPTIM1_Init+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_LPTIM1_Init+0x54>)
 80007d0:	f001 f98e 	bl	8001af0 <HAL_LPTIM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80007da:	f000 f9f3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	40002400 	.word	0x40002400

080007ec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_RNG_Init+0x20>)
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <MX_RNG_Init+0x24>)
 80007f4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_RNG_Init+0x20>)
 80007f8:	f002 fc18 	bl	800302c <HAL_RNG_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000802:	f000 f9df 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000bc 	.word	0x200000bc
 8000810:	50060800 	.word	0x50060800

08000814 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_UART4_Init+0x58>)
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <MX_UART4_Init+0x5c>)
 800081c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_UART4_Init+0x58>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_UART4_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_UART4_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_UART4_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_UART4_Init+0x58>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_UART4_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_UART4_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_UART4_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_UART4_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_UART4_Init+0x58>)
 8000858:	f002 fcd3 	bl	8003202 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f9af 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000cc 	.word	0x200000cc
 8000870:	40004c00 	.word	0x40004c00

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_USART2_UART_Init+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART2_UART_Init+0x58>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x58>)
 80008b8:	f002 fca3 	bl	8003202 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c2:	f000 f97f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000154 	.word	0x20000154
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART3_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000918:	f002 fc73 	bl	8003202 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f94f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001dc 	.word	0x200001dc
 8000930:	40004800 	.word	0x40004800

08000934 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2206      	movs	r2, #6
 8000944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2202      	movs	r2, #2
 8000956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2201      	movs	r2, #1
 800095c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2201      	movs	r2, #1
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	f001 f946 	bl	8001c08 <HAL_PCD_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f91f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000264 	.word	0x20000264

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b80      	ldr	r3, [pc, #512]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a7f      	ldr	r2, [pc, #508]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b7d      	ldr	r3, [pc, #500]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b7a      	ldr	r3, [pc, #488]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a79      	ldr	r2, [pc, #484]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b77      	ldr	r3, [pc, #476]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b74      	ldr	r3, [pc, #464]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a73      	ldr	r2, [pc, #460]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b6e      	ldr	r3, [pc, #440]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a6d      	ldr	r2, [pc, #436]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b6b      	ldr	r3, [pc, #428]	; (8000ba8 <MX_GPIO_Init+0x218>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	4b68      	ldr	r3, [pc, #416]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a67      	ldr	r2, [pc, #412]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	4b62      	ldr	r3, [pc, #392]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a61      	ldr	r2, [pc, #388]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a54:	4855      	ldr	r0, [pc, #340]	; (8000bac <MX_GPIO_Init+0x21c>)
 8000a56:	f001 f80d 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2141      	movs	r1, #65	; 0x41
 8000a5e:	4854      	ldr	r0, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x220>)
 8000a60:	f001 f808 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	484e      	ldr	r0, [pc, #312]	; (8000bb4 <MX_GPIO_Init+0x224>)
 8000a7c:	f000 fe4e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a80:	2332      	movs	r3, #50	; 0x32
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a90:	230b      	movs	r3, #11
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4846      	ldr	r0, [pc, #280]	; (8000bb4 <MX_GPIO_Init+0x224>)
 8000a9c:	f000 fe3e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	483f      	ldr	r0, [pc, #252]	; (8000bb8 <MX_GPIO_Init+0x228>)
 8000abc:	f000 fe2e 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_GPIO_Init+0x21c>)
 8000ada:	f000 fe1f 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000ade:	2341      	movs	r3, #65	; 0x41
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x220>)
 8000af6:	f000 fe11 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4829      	ldr	r0, [pc, #164]	; (8000bbc <MX_GPIO_Init+0x22c>)
 8000b16:	f000 fe01 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481d      	ldr	r0, [pc, #116]	; (8000bac <MX_GPIO_Init+0x21c>)
 8000b38:	f000 fdf0 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <MX_GPIO_Init+0x220>)
 8000b50:	f000 fde4 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0x230>)
 8000b68:	f000 fdd8 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7e:	230b      	movs	r3, #11
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_GPIO_Init+0x220>)
 8000b8a:	f000 fdc7 	bl	800171c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2028      	movs	r0, #40	; 0x28
 8000b94:	f000 fcf9 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b98:	2028      	movs	r0, #40	; 0x28
 8000b9a:	f000 fd12 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	; 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	2284      	movs	r2, #132	; 0x84
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fbcf 	bl	80053dc <memset>
  if(hlptim->Instance==LPTIM1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_LPTIM_MspInit+0xf8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d15e      	bne.n	8000d06 <HAL_LPTIM_MspInit+0xee>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000c48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fdf7 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8000c64:	f7ff ffae 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_LPTIM_MspInit+0xfc>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PG12     ------> LPTIM1_IN1
    PE0     ------> LPTIM1_ETR
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <HAL_LPTIM_MspInit+0x100>)
 8000cd8:	f000 fd20 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <HAL_LPTIM_MspInit+0x104>)
 8000d02:	f000 fd0b 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	37b0      	adds	r7, #176	; 0xb0
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40002400 	.word	0x40002400
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0a4      	sub	sp, #144	; 0x90
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2284      	movs	r2, #132	; 0x84
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fb53 	bl	80053dc <memset>
  if(hrng->Instance==RNG)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <HAL_RNG_MspInit+0x70>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d123      	bne.n	8000d88 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fd7b 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000d5c:	f7ff ff32 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_RNG_MspInit+0x74>)
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <HAL_RNG_MspInit+0x74>)
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	6353      	str	r3, [r2, #52]	; 0x34
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_RNG_MspInit+0x74>)
 8000d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2050      	movs	r0, #80	; 0x50
 8000d7e:	f000 fc04 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000d82:	2050      	movs	r0, #80	; 0x50
 8000d84:	f000 fc1d 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3790      	adds	r7, #144	; 0x90
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	50060800 	.word	0x50060800
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	; 0xc0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db4:	2284      	movs	r2, #132	; 0x84
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 fb0f 	bl	80053dc <memset>
  if(huart->Instance==UART4)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a80      	ldr	r2, [pc, #512]	; (8000fc4 <HAL_UART_MspInit+0x22c>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d145      	bne.n	8000e54 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd38 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de2:	f7ff feef 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000de6:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a77      	ldr	r2, [pc, #476]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e30:	2308      	movs	r3, #8
 8000e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4863      	ldr	r0, [pc, #396]	; (8000fcc <HAL_UART_MspInit+0x234>)
 8000e3e:	f000 fc6d 	bl	800171c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2034      	movs	r0, #52	; 0x34
 8000e48:	f000 fb9f 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e4c:	2034      	movs	r0, #52	; 0x34
 8000e4e:	f000 fbb8 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e52:	e0b3      	b.n	8000fbc <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a5d      	ldr	r2, [pc, #372]	; (8000fd0 <HAL_UART_MspInit+0x238>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d164      	bne.n	8000f28 <HAL_UART_MspInit+0x190>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fcee 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000e76:	f7ff fea5 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	483b      	ldr	r0, [pc, #236]	; (8000fd4 <HAL_UART_MspInit+0x23c>)
 8000ee8:	f000 fc18 	bl	800171c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f04:	2307      	movs	r3, #7
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4831      	ldr	r0, [pc, #196]	; (8000fd8 <HAL_UART_MspInit+0x240>)
 8000f12:	f000 fc03 	bl	800171c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2026      	movs	r0, #38	; 0x26
 8000f1c:	f000 fb35 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f20:	2026      	movs	r0, #38	; 0x26
 8000f22:	f000 fb4e 	bl	80015c2 <HAL_NVIC_EnableIRQ>
}
 8000f26:	e049      	b.n	8000fbc <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <HAL_UART_MspInit+0x244>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d144      	bne.n	8000fbc <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fc83 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8000f4c:	f7ff fe3a 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0x230>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_UART_MspInit+0x240>)
 8000fa8:	f000 fbb8 	bl	800171c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2027      	movs	r0, #39	; 0x27
 8000fb2:	f000 faea 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb6:	2027      	movs	r0, #39	; 0x27
 8000fb8:	f000 fb03 	bl	80015c2 <HAL_NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	37c0      	adds	r7, #192	; 0xc0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40004c00 	.word	0x40004c00
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40004400 	.word	0x40004400
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40004800 	.word	0x40004800

08000fe0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ac      	sub	sp, #176	; 0xb0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	2284      	movs	r2, #132	; 0x84
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f004 f9eb 	bl	80053dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100e:	d159      	bne.n	80010c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001014:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fc13 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800102c:	f7ff fdca 	bl	8000bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <HAL_PCD_MspInit+0xec>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a25      	ldr	r2, [pc, #148]	; (80010cc <HAL_PCD_MspInit+0xec>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_PCD_MspInit+0xec>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001048:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800104c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001062:	230a      	movs	r3, #10
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106c:	4619      	mov	r1, r3
 800106e:	4818      	ldr	r0, [pc, #96]	; (80010d0 <HAL_PCD_MspInit+0xf0>)
 8001070:	f000 fb54 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800108c:	4619      	mov	r1, r3
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <HAL_PCD_MspInit+0xf0>)
 8001090:	f000 fb44 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_PCD_MspInit+0xec>)
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_PCD_MspInit+0xec>)
 800109a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109e:	6353      	str	r3, [r2, #52]	; 0x34
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	37b0      	adds	r7, #176	; 0xb0
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f914 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART2_IRQHandler+0x10>)
 800112e:	f002 fa9f 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000154 	.word	0x20000154

0800113c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART3_IRQHandler+0x10>)
 8001142:	f002 fa95 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //uart3_flag_h = 1;
  /* USER CODE END USART3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001dc 	.word	0x200001dc

08001150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001154:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001158:	f000 fca6 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <UART4_IRQHandler+0x10>)
 8001166:	f002 fa83 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000cc 	.word	0x200000cc

08001174 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <RNG_IRQHandler+0x10>)
 800117a:	f001 ffd7 	bl	800312c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000bc 	.word	0x200000bc

08001188 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b0:	605a      	str	r2, [r3, #4]
	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_isatty>:

int _isatty(int file)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	return 1;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f004 f8b2 	bl	8005388 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20050000 	.word	0x20050000
 8001250:	00000400 	.word	0x00000400
 8001254:	2000076c 	.word	0x2000076c
 8001258:	20000790 	.word	0x20000790

0800125c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001286:	490e      	ldr	r1, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800129c:	4c0b      	ldr	r4, [pc, #44]	; (80012cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd7 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 f871 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff f9e9 	bl	8000688 <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012c4:	08006438 	.word	0x08006438
  ldr r2, =_sbss
 80012c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012cc:	20000790 	.word	0x20000790

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>

080012d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f94c 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f805 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fc75 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f967 	bl	80015de <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f000 f92f 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	20000770 	.word	0x20000770

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000770 	.word	0x20000770

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	05fa0000 	.word	0x05fa0000

0800141c <__NVIC_GetPriorityGrouping>:
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff feb6 	bl	8001374 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d008      	beq.n	8001628 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e052      	b.n	80016ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0216 	bic.w	r2, r2, #22
 8001636:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001646:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <HAL_DMA_Abort+0x62>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001678:	e013      	b.n	80016a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167a:	f7ff fe7b 	bl	8001374 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b05      	cmp	r3, #5
 8001686:	d90c      	bls.n	80016a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e015      	b.n	80016ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e4      	bne.n	800167a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	223f      	movs	r2, #63	; 0x3f
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d004      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e00c      	b.n	800170e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2205      	movs	r2, #5
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e175      	b.n	8001a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8164 	bne.w	8001a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x56>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80be 	beq.w	8001a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_GPIO_Init+0x324>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018be:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <HAL_GPIO_Init+0x328>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d037      	beq.n	800195a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <HAL_GPIO_Init+0x334>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a53      	ldr	r2, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x22a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x350>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x21a>
 8001932:	2309      	movs	r3, #9
 8001934:	e012      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001936:	230a      	movs	r3, #10
 8001938:	e010      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193a:	2308      	movs	r3, #8
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193e:	2307      	movs	r3, #7
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x240>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x328>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_GPIO_Init+0x354>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a34      	ldr	r2, [pc, #208]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x354>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae86 	bls.w	800173c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022400 	.word	0x40022400
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f806 	bl	8001ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07a      	b.n	8001bf8 <HAL_LPTIM_Init+0x108>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff f87b 	bl	8000c18 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d004      	beq.n	8001b44 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b42:	d103      	bne.n	8001b4c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 031e 	bic.w	r3, r3, #30
 8001b4a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_LPTIM_Init+0x110>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_LPTIM_Init+0x114>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b70:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001b76:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001b7c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001b82:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d004      	beq.n	8001bb4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb2:	d107      	bne.n	8001bc4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00a      	beq.n	8001be6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001bd8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001bde:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	ffff1f3f 	.word	0xffff1f3f
 8001c04:	ff19f1fe 	.word	0xff19f1fe

08001c08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b08f      	sub	sp, #60	; 0x3c
 8001c0c:	af0a      	add	r7, sp, #40	; 0x28
 8001c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e116      	b.n	8001e48 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff f9d3 	bl	8000fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 ffd9 	bl	8004c10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	687e      	ldr	r6, [r7, #4]
 8001c66:	466d      	mov	r5, sp
 8001c68:	f106 0410 	add.w	r4, r6, #16
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7c:	1d33      	adds	r3, r6, #4
 8001c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c80:	6838      	ldr	r0, [r7, #0]
 8001c82:	f002 ff6d 	bl	8004b60 <USB_CoreInit>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0d7      	b.n	8001e48 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 ffc7 	bl	8004c32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e04a      	b.n	8001d40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	333d      	adds	r3, #61	; 0x3d
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	333c      	adds	r3, #60	; 0x3c
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3344      	adds	r3, #68	; 0x44
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3340      	adds	r3, #64	; 0x40
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3348      	adds	r3, #72	; 0x48
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	334c      	adds	r3, #76	; 0x4c
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3354      	adds	r3, #84	; 0x54
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3af      	bcc.n	8001caa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e044      	b.n	8001dda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3b5      	bcc.n	8001d50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	687e      	ldr	r6, [r7, #4]
 8001dec:	466d      	mov	r5, sp
 8001dee:	f106 0410 	add.w	r4, r6, #16
 8001df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e02:	1d33      	adds	r3, r6, #4
 8001e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e06:	6838      	ldr	r0, [r7, #0]
 8001e08:	f002 ff60 	bl	8004ccc <USB_DevInit>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e014      	b.n	8001e48 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f80a 	bl	8001e50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 f91e 	bl	8005082 <USB_DevDisconnect>

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	10000003 	.word	0x10000003

08001e98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40007000 	.word	0x40007000

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e291      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8087 	beq.w	8001fea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee8:	4b93      	ldr	r3, [pc, #588]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d112      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62>
 8001ef4:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b8d      	ldr	r3, [pc, #564]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x130>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d168      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e26b      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x7a>
 8001f24:	4b84      	ldr	r3, [pc, #528]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a83      	ldr	r2, [pc, #524]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0xd8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x9c>
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7b      	ldr	r2, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xd8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xd8>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6b      	ldr	r2, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f9ec 	bl	8001374 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f9e8 	bl	8001374 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e21f      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe8>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9d8 	bl	8001374 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f9d4 	bl	8001374 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e20b      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b57      	ldr	r3, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x110>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d069      	beq.n	80020ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff6:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x190>
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x17a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1df      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	493d      	ldr	r1, [pc, #244]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e040      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d023      	beq.n	8002098 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a38      	ldr	r2, [pc, #224]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f98a 	bl	8001374 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff f986 	bl	8001374 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1bd      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4929      	ldr	r1, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
 8002096:	e018      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a26      	ldr	r2, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f966 	bl	8001374 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f962 	bl	8001374 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e199      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d038      	beq.n	8002148 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff f943 	bl	8001374 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7ff f93f 	bl	8001374 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e176      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x23a>
 8002110:	e01a      	b.n	8002148 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_RCC_OscConfig+0x280>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff f929 	bl	8001374 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff f925 	bl	8001374 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d903      	bls.n	800213c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e15c      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
 8002138:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b91      	ldr	r3, [pc, #580]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a4 	beq.w	800229e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a87      	ldr	r2, [pc, #540]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b85      	ldr	r3, [pc, #532]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4b82      	ldr	r3, [pc, #520]	; (8002388 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800218a:	4b7f      	ldr	r3, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7e      	ldr	r2, [pc, #504]	; (8002388 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7ff f8ed 	bl	8001374 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7ff f8e9 	bl	8001374 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e120      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4b75      	ldr	r3, [pc, #468]	; (8002388 <HAL_RCC_OscConfig+0x4d0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x31a>
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	e02d      	b.n	800222e <HAL_RCC_OscConfig+0x376>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x33c>
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a69      	ldr	r2, [pc, #420]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a66      	ldr	r2, [pc, #408]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	e01c      	b.n	800222e <HAL_RCC_OscConfig+0x376>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x35e>
 80021fc:	4b61      	ldr	r3, [pc, #388]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a60      	ldr	r2, [pc, #384]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x376>
 8002216:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
 8002222:	4b58      	ldr	r3, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f89d 	bl	8001374 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f899 	bl	8001374 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0ce      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ee      	beq.n	800223e <HAL_RCC_OscConfig+0x386>
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7ff f887 	bl	8001374 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7ff f883 	bl	8001374 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ee      	bne.n	800226a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80a4 	beq.w	80023f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d06b      	beq.n	800238c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d149      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f854 	bl	8001374 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f850 	bl	8001374 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e087      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	4313      	orrs	r3, r2
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800231a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f824 	bl	8001374 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f820 	bl	8001374 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e057      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x478>
 800234e:	e04f      	b.n	80023f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f80a 	bl	8001374 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff f806 	bl	8001374 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e03d      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x4ac>
 8002382:	e035      	b.n	80023f0 <HAL_RCC_OscConfig+0x538>
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x544>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d028      	beq.n	80023ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d121      	bne.n	80023ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d11a      	bne.n	80023ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d0      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 020f 	bic.w	r2, r3, #15
 800242e:	4965      	ldr	r1, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002482:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d040      	beq.n	8002524 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e073      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4936      	ldr	r1, [pc, #216]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe ff3e 	bl	8001374 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe ff3a 	bl	8001374 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e053      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 020f 	bic.w	r2, r3, #15
 800253a:	4922      	ldr	r1, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1cc>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1d0>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1d4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fe9a 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08006378 	.word	0x08006378
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b094      	sub	sp, #80	; 0x50
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	2300      	movs	r3, #0
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d00d      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x40>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f200 80e1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x3a>
 800260a:	e0db      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002610:	e0db      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002616:	e0d8      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002618:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002620:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	2200      	movs	r2, #0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
 8002638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4621      	mov	r1, r4
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	6139      	str	r1, [r7, #16]
 8002668:	4629      	mov	r1, r5
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800267c:	4659      	mov	r1, fp
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4651      	mov	r1, sl
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4651      	mov	r1, sl
 800268c:	ebb2 0801 	subs.w	r8, r2, r1
 8002690:	4659      	mov	r1, fp
 8002692:	eb63 0901 	sbc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	462b      	mov	r3, r5
 80026b8:	eb49 0303 	adc.w	r3, r9, r3
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ca:	4629      	mov	r1, r5
 80026cc:	024b      	lsls	r3, r1, #9
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d4:	4621      	mov	r1, r4
 80026d6:	024a      	lsls	r2, r1, #9
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e8:	f7fd fde2 	bl	80002b0 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	e058      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	4611      	mov	r1, r2
 8002702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	f04f 0000 	mov.w	r0, #0
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002722:	0150      	lsls	r0, r2, #5
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4641      	mov	r1, r8
 800272a:	ebb2 0a01 	subs.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb63 0b01 	sbc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002748:	ebb2 040a 	subs.w	r4, r2, sl
 800274c:	eb63 050b 	sbc.w	r5, r3, fp
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	00eb      	lsls	r3, r5, #3
 800275a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275e:	00e2      	lsls	r2, r4, #3
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4643      	mov	r3, r8
 8002766:	18e3      	adds	r3, r4, r3
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	464b      	mov	r3, r9
 800276c:	eb45 0303 	adc.w	r3, r5, r3
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	f7fd fd88 	bl	80002b0 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08006388 	.word	0x08006388

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08006388 	.word	0x08006388

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a68      	ldr	r2, [pc, #416]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	4964      	ldr	r1, [pc, #400]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	4959      	ldr	r1, [pc, #356]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d017      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	494a      	ldr	r1, [pc, #296]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 808b 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002948:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002954:	f7fe fd0e 	bl	8001374 <HAL_GetTick>
 8002958:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fd0a 	bl	8001374 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e357      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d035      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d02e      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d114      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fcd2 	bl	8001374 <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe fcce 	bl	8001374 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e319      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d111      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	4901      	ldr	r1, [pc, #4]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000
 8002a24:	0ffffcff 	.word	0x0ffffcff
 8002a28:	4baa      	ldr	r3, [pc, #680]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4aa9      	ldr	r2, [pc, #676]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a32:	6093      	str	r3, [r2, #8]
 8002a34:	4ba7      	ldr	r3, [pc, #668]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	49a4      	ldr	r1, [pc, #656]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a52:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a58:	4a9e      	ldr	r2, [pc, #632]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a62:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	4999      	ldr	r1, [pc, #612]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a80:	4b94      	ldr	r3, [pc, #592]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	4991      	ldr	r1, [pc, #580]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab0:	4988      	ldr	r1, [pc, #544]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac4:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad2:	4980      	ldr	r1, [pc, #512]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae6:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4977      	ldr	r1, [pc, #476]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b08:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	496f      	ldr	r1, [pc, #444]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f023 020c 	bic.w	r2, r3, #12
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	4966      	ldr	r1, [pc, #408]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	495e      	ldr	r1, [pc, #376]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	4955      	ldr	r1, [pc, #340]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bb2:	4b48      	ldr	r3, [pc, #288]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	4944      	ldr	r1, [pc, #272]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	493c      	ldr	r1, [pc, #240]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	4933      	ldr	r1, [pc, #204]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c18:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c26:	492b      	ldr	r1, [pc, #172]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d011      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c48:	4922      	ldr	r1, [pc, #136]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c58:	d101      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d006      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80d9 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a01      	ldr	r2, [pc, #4]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fe fb4b 	bl	8001374 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ce2:	f7fe fb47 	bl	8001374 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	; 0x64
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e194      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf4:	4b6c      	ldr	r3, [pc, #432]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d021      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d14:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d22:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	019a      	lsls	r2, r3, #6
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	061b      	lsls	r3, r3, #24
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	071b      	lsls	r3, r3, #28
 8002d48:	4957      	ldr	r1, [pc, #348]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02e      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d129      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d90:	0f1b      	lsrs	r3, r3, #28
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	019a      	lsls	r2, r3, #6
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	071b      	lsls	r3, r3, #28
 8002db0:	493d      	ldr	r1, [pc, #244]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbe:	f023 021f 	bic.w	r2, r3, #31
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4937      	ldr	r1, [pc, #220]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	0e1b      	lsrs	r3, r3, #24
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df0:	0f1b      	lsrs	r3, r3, #28
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	019a      	lsls	r2, r3, #6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	071b      	lsls	r3, r3, #28
 8002e10:	4925      	ldr	r1, [pc, #148]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d011      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	019a      	lsls	r2, r3, #6
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	071b      	lsls	r3, r3, #28
 8002e40:	4919      	ldr	r1, [pc, #100]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fe fa8e 	bl	8001374 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e5c:	f7fe fa8a 	bl	8001374 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0d7      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 80cd 	bne.w	800301c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8e:	f7fe fa71 	bl	8001374 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e96:	f7fe fa6d 	bl	8001374 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d903      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0ba      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ea8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb8:	d0ed      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02e      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12a      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	0f1b      	lsrs	r3, r3, #28
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	019a      	lsls	r2, r3, #6
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	061b      	lsls	r3, r3, #24
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	071b      	lsls	r3, r3, #28
 8002f16:	4944      	ldr	r1, [pc, #272]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f1e:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	493d      	ldr	r1, [pc, #244]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f4c:	d11d      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	0f1b      	lsrs	r3, r3, #28
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	019a      	lsls	r2, r3, #6
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	071b      	lsls	r3, r3, #28
 8002f82:	4929      	ldr	r1, [pc, #164]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d028      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	0e1b      	lsrs	r3, r3, #24
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	4917      	ldr	r1, [pc, #92]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	4911      	ldr	r1, [pc, #68]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fe f9be 	bl	8001374 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ffc:	f7fe f9ba 	bl	8001374 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e007      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301a:	d1ef      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800

0800302c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01c      	b.n	8003078 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	795b      	ldrb	r3, [r3, #5]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd fe66 	bl	8000d20 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0204 	orr.w	r2, r2, #4
 8003068:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003096:	2302      	movs	r3, #2
 8003098:	e044      	b.n	8003124 <HAL_RNG_GenerateRandomNumber+0xa4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	795b      	ldrb	r3, [r3, #5]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d133      	bne.n	8003112 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030b0:	f7fe f960 	bl	8001374 <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80030b6:	e018      	b.n	80030ea <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80030b8:	f7fe f95c 	bl	8001374 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d911      	bls.n	80030ea <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d00a      	beq.n	80030ea <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01c      	b.n	8003124 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d1df      	bne.n	80030b8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	715a      	strb	r2, [r3, #5]
 8003110:	e004      	b.n	800311c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	711a      	strb	r2, [r3, #4]

  return status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b20      	cmp	r3, #32
 8003144:	d105      	bne.n	8003152 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2210      	movs	r2, #16
 800314a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800314c:	2301      	movs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e00b      	b.n	800316a <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d104      	bne.n	800316a <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2208      	movs	r2, #8
 8003164:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003166:	2301      	movs	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10b      	bne.n	8003188 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2204      	movs	r2, #4
 8003174:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f839 	bl	80031ee <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003184:	605a      	str	r2, [r3, #4]

    return;
 8003186:	e024      	b.n	80031d2 <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d11d      	bne.n	80031d2 <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0208 	bic.w	r2, r2, #8
 80031a4:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	795b      	ldrb	r3, [r3, #5]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00b      	beq.n	80031d2 <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f803 	bl	80031d8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e040      	b.n	8003296 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fd fdb7 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fcfd 	bl	8003c40 <UART_SetConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e022      	b.n	8003296 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ff55 	bl	8004108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800326c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800327c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 ffdc 	bl	800424c <UART_CheckIdleState>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d171      	bne.n	800339a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_UART_Transmit+0x24>
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06a      	b.n	800339c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d4:	f7fe f84e 	bl	8001374 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d108      	bne.n	8003306 <HAL_UART_Transmit+0x68>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e003      	b.n	800330e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800330e:	e02c      	b.n	800336a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2200      	movs	r2, #0
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 ffcd 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e038      	b.n	800339c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3302      	adds	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e007      	b.n	8003358 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cc      	bne.n	8003310 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 ff9a 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e005      	b.n	800339c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
  }
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 80b1 	bne.w	8003522 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_UART_Receive+0x28>
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0a9      	b.n	8003524 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2222      	movs	r2, #34	; 0x22
 80033dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e6:	f7fd ffc5 	bl	8001374 <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	88fa      	ldrh	r2, [r7, #6]
 80033f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003404:	d10e      	bne.n	8003424 <HAL_UART_Receive+0x80>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_UART_Receive+0x76>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003418:	e02d      	b.n	8003476 <HAL_UART_Receive+0xd2>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003422:	e028      	b.n	8003476 <HAL_UART_Receive+0xd2>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10d      	bne.n	8003448 <HAL_UART_Receive+0xa4>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <HAL_UART_Receive+0x9a>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800343c:	e01b      	b.n	8003476 <HAL_UART_Receive+0xd2>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	227f      	movs	r2, #127	; 0x7f
 8003442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003446:	e016      	b.n	8003476 <HAL_UART_Receive+0xd2>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003450:	d10d      	bne.n	800346e <HAL_UART_Receive+0xca>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Receive+0xc0>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	227f      	movs	r2, #127	; 0x7f
 800345e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003462:	e008      	b.n	8003476 <HAL_UART_Receive+0xd2>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	223f      	movs	r2, #63	; 0x3f
 8003468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800346c:	e003      	b.n	8003476 <HAL_UART_Receive+0xd2>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800347c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d108      	bne.n	800349a <HAL_UART_Receive+0xf6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e003      	b.n	80034a2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80034a2:	e032      	b.n	800350a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2120      	movs	r1, #32
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 ff03 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e032      	b.n	8003524 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	8a7b      	ldrh	r3, [r7, #18]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	3302      	adds	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e00c      	b.n	80034f8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8a7b      	ldrh	r3, [r7, #18]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4013      	ands	r3, r2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1c6      	bne.n	80034a4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800352c:	b480      	push	{r7}
 800352e:	b08b      	sub	sp, #44	; 0x2c
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353e:	2b20      	cmp	r3, #32
 8003540:	d147      	bne.n	80035d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_Transmit_IT+0x22>
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e040      	b.n	80035d4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003584:	d107      	bne.n	8003596 <HAL_UART_Transmit_IT+0x6a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_UART_Transmit_IT+0xb4>)
 8003592:	66da      	str	r2, [r3, #108]	; 0x6c
 8003594:	e002      	b.n	800359c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <HAL_UART_Transmit_IT+0xb8>)
 800359a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	613b      	str	r3, [r7, #16]
   return(result);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	372c      	adds	r7, #44	; 0x2c
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	0800477f 	.word	0x0800477f
 80035e4:	080046c9 	.word	0x080046c9

080035e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d132      	bne.n	8003666 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_UART_Receive_IT+0x24>
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02b      	b.n	8003668 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d018      	beq.n	8003656 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	613b      	str	r3, [r7, #16]
   return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	69f9      	ldr	r1, [r7, #28]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e6      	bne.n	8003624 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	461a      	mov	r2, r3
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fef3 	bl	8004448 <UART_Start_Receive_IT>
 8003662:	4603      	mov	r3, r0
 8003664:	e000      	b.n	8003668 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ba      	sub	sp, #232	; 0xe8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800369a:	f640 030f 	movw	r3, #2063	; 0x80f
 800369e:	4013      	ands	r3, r2
 80036a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d115      	bne.n	80036d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00f      	beq.n	80036d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8297 	beq.w	8003bfc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
      }
      return;
 80036d6:	e291      	b.n	8003bfc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8117 	beq.w	8003910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036f2:	4b85      	ldr	r3, [pc, #532]	; (8003908 <HAL_UART_IRQHandler+0x298>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 810a 	beq.w	8003910 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d011      	beq.n	800372c <HAL_UART_IRQHandler+0xbc>
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <HAL_UART_IRQHandler+0xec>
 8003738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2202      	movs	r2, #2
 800374a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003752:	f043 0204 	orr.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800375c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_UART_IRQHandler+0x11c>
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2204      	movs	r2, #4
 800377a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d017      	beq.n	80037c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2208      	movs	r2, #8
 80037b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	f043 0208 	orr.w	r2, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <HAL_UART_IRQHandler+0x18a>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00c      	beq.n	80037fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 81fd 	beq.w	8003c00 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800384a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	d04f      	beq.n	80038f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 febe 	bl	80045d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d141      	bne.n	80038ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003892:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800389e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d013      	beq.n	80038e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_UART_IRQHandler+0x29c>)
 80038c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd ff05 	bl	80016d6 <HAL_DMA_Abort_IT>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d017      	beq.n	8003902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038dc:	4610      	mov	r0, r2
 80038de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e00f      	b.n	8003902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f996 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00b      	b.n	8003902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f992 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e007      	b.n	8003902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f98e 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003900:	e17e      	b.n	8003c00 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003902:	bf00      	nop
    return;
 8003904:	e17c      	b.n	8003c00 <HAL_UART_IRQHandler+0x590>
 8003906:	bf00      	nop
 8003908:	04000120 	.word	0x04000120
 800390c:	0800469d 	.word	0x0800469d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 814c 	bne.w	8003bb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8145 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 813e 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	f040 80b6 	bne.w	8003aba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800395a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8150 	beq.w	8003c04 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800396a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800396e:	429a      	cmp	r2, r3
 8003970:	f080 8148 	bcs.w	8003c04 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800397a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003988:	f000 8086 	beq.w	8003a98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1da      	bne.n	800398c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e1      	bne.n	80039d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e3      	bne.n	8003a12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a68:	f023 0310 	bic.w	r3, r3, #16
 8003a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e4      	bne.n	8003a58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fdaf 	bl	80015f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8b8 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ab8:	e0a4      	b.n	8003c04 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8096 	beq.w	8003c08 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8091 	beq.w	8003c08 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e4      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b40:	633a      	str	r2, [r7, #48]	; 0x30
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e3      	bne.n	8003b1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0310 	bic.w	r3, r3, #16
 8003b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	69b9      	ldr	r1, [r7, #24]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	617b      	str	r3, [r7, #20]
   return(result);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e4      	bne.n	8003b68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f83c 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bb0:	e02a      	b.n	8003c08 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01c      	beq.n	8003c0c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
    }
    return;
 8003bda:	e017      	b.n	8003c0c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <HAL_UART_IRQHandler+0x59e>
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00c      	beq.n	8003c0e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fe22 	bl	800483e <UART_EndTransmit_IT>
    return;
 8003bfa:	e008      	b.n	8003c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8003bfc:	bf00      	nop
 8003bfe:	e006      	b.n	8003c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8003c00:	bf00      	nop
 8003c02:	e004      	b.n	8003c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8003c0c:	bf00      	nop
  }

}
 8003c0e:	37e8      	adds	r7, #232	; 0xe8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4ba6      	ldr	r3, [pc, #664]	; (8003f04 <UART_SetConfig+0x2c4>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6979      	ldr	r1, [r7, #20]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a94      	ldr	r2, [pc, #592]	; (8003f08 <UART_SetConfig+0x2c8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d120      	bne.n	8003cfe <UART_SetConfig+0xbe>
 8003cbc:	4b93      	ldr	r3, [pc, #588]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d816      	bhi.n	8003cf8 <UART_SetConfig+0xb8>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x90>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003ce1 	.word	0x08003ce1
 8003cd4:	08003ced 	.word	0x08003ced
 8003cd8:	08003ce7 	.word	0x08003ce7
 8003cdc:	08003cf3 	.word	0x08003cf3
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e150      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e14d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e14a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e147      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e144      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <UART_SetConfig+0x2d0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d132      	bne.n	8003d6e <UART_SetConfig+0x12e>
 8003d08:	4b80      	ldr	r3, [pc, #512]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d828      	bhi.n	8003d68 <UART_SetConfig+0x128>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0xdc>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d69 	.word	0x08003d69
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d69 	.word	0x08003d69
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d69 	.word	0x08003d69
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d69 	.word	0x08003d69
 8003d3c:	08003d57 	.word	0x08003d57
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d69 	.word	0x08003d69
 8003d4c:	08003d63 	.word	0x08003d63
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e118      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e115      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e112      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e10f      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e10c      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a68      	ldr	r2, [pc, #416]	; (8003f14 <UART_SetConfig+0x2d4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d120      	bne.n	8003dba <UART_SetConfig+0x17a>
 8003d78:	4b64      	ldr	r3, [pc, #400]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d82:	2b30      	cmp	r3, #48	; 0x30
 8003d84:	d013      	beq.n	8003dae <UART_SetConfig+0x16e>
 8003d86:	2b30      	cmp	r3, #48	; 0x30
 8003d88:	d814      	bhi.n	8003db4 <UART_SetConfig+0x174>
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d009      	beq.n	8003da2 <UART_SetConfig+0x162>
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d810      	bhi.n	8003db4 <UART_SetConfig+0x174>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <UART_SetConfig+0x15c>
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d006      	beq.n	8003da8 <UART_SetConfig+0x168>
 8003d9a:	e00b      	b.n	8003db4 <UART_SetConfig+0x174>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e0f2      	b.n	8003f88 <UART_SetConfig+0x348>
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e0ef      	b.n	8003f88 <UART_SetConfig+0x348>
 8003da8:	2304      	movs	r3, #4
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e0ec      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dae:	2308      	movs	r3, #8
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e0e9      	b.n	8003f88 <UART_SetConfig+0x348>
 8003db4:	2310      	movs	r3, #16
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e0e6      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a56      	ldr	r2, [pc, #344]	; (8003f18 <UART_SetConfig+0x2d8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d120      	bne.n	8003e06 <UART_SetConfig+0x1c6>
 8003dc4:	4b51      	ldr	r3, [pc, #324]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dce:	2bc0      	cmp	r3, #192	; 0xc0
 8003dd0:	d013      	beq.n	8003dfa <UART_SetConfig+0x1ba>
 8003dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003dd4:	d814      	bhi.n	8003e00 <UART_SetConfig+0x1c0>
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d009      	beq.n	8003dee <UART_SetConfig+0x1ae>
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d810      	bhi.n	8003e00 <UART_SetConfig+0x1c0>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x1a8>
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d006      	beq.n	8003df4 <UART_SetConfig+0x1b4>
 8003de6:	e00b      	b.n	8003e00 <UART_SetConfig+0x1c0>
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e0cc      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dee:	2302      	movs	r3, #2
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e0c9      	b.n	8003f88 <UART_SetConfig+0x348>
 8003df4:	2304      	movs	r3, #4
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e0c6      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e0c3      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e0c0      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a44      	ldr	r2, [pc, #272]	; (8003f1c <UART_SetConfig+0x2dc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d125      	bne.n	8003e5c <UART_SetConfig+0x21c>
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1e:	d017      	beq.n	8003e50 <UART_SetConfig+0x210>
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d817      	bhi.n	8003e56 <UART_SetConfig+0x216>
 8003e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2a:	d00b      	beq.n	8003e44 <UART_SetConfig+0x204>
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d811      	bhi.n	8003e56 <UART_SetConfig+0x216>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <UART_SetConfig+0x1fe>
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3a:	d006      	beq.n	8003e4a <UART_SetConfig+0x20a>
 8003e3c:	e00b      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e0a1      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e44:	2302      	movs	r3, #2
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e09e      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e09b      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e50:	2308      	movs	r3, #8
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e098      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e56:	2310      	movs	r3, #16
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e095      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <UART_SetConfig+0x2e0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d125      	bne.n	8003eb2 <UART_SetConfig+0x272>
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e74:	d017      	beq.n	8003ea6 <UART_SetConfig+0x266>
 8003e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7a:	d817      	bhi.n	8003eac <UART_SetConfig+0x26c>
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	d00b      	beq.n	8003e9a <UART_SetConfig+0x25a>
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e86:	d811      	bhi.n	8003eac <UART_SetConfig+0x26c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <UART_SetConfig+0x254>
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e90:	d006      	beq.n	8003ea0 <UART_SetConfig+0x260>
 8003e92:	e00b      	b.n	8003eac <UART_SetConfig+0x26c>
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e076      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e073      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e070      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e06d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003eac:	2310      	movs	r3, #16
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e06a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <UART_SetConfig+0x2e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d138      	bne.n	8003f2e <UART_SetConfig+0x2ee>
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <UART_SetConfig+0x2cc>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eca:	d017      	beq.n	8003efc <UART_SetConfig+0x2bc>
 8003ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ed0:	d82a      	bhi.n	8003f28 <UART_SetConfig+0x2e8>
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d00b      	beq.n	8003ef0 <UART_SetConfig+0x2b0>
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003edc:	d824      	bhi.n	8003f28 <UART_SetConfig+0x2e8>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <UART_SetConfig+0x2aa>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d006      	beq.n	8003ef6 <UART_SetConfig+0x2b6>
 8003ee8:	e01e      	b.n	8003f28 <UART_SetConfig+0x2e8>
 8003eea:	2300      	movs	r3, #0
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e04b      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e048      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e045      	b.n	8003f88 <UART_SetConfig+0x348>
 8003efc:	2308      	movs	r3, #8
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e042      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f02:	bf00      	nop
 8003f04:	efff69f3 	.word	0xefff69f3
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40004400 	.word	0x40004400
 8003f14:	40004800 	.word	0x40004800
 8003f18:	40004c00 	.word	0x40004c00
 8003f1c:	40005000 	.word	0x40005000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	40007800 	.word	0x40007800
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e02c      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a72      	ldr	r2, [pc, #456]	; (80040fc <UART_SetConfig+0x4bc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d125      	bne.n	8003f84 <UART_SetConfig+0x344>
 8003f38:	4b71      	ldr	r3, [pc, #452]	; (8004100 <UART_SetConfig+0x4c0>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f46:	d017      	beq.n	8003f78 <UART_SetConfig+0x338>
 8003f48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f4c:	d817      	bhi.n	8003f7e <UART_SetConfig+0x33e>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f52:	d00b      	beq.n	8003f6c <UART_SetConfig+0x32c>
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d811      	bhi.n	8003f7e <UART_SetConfig+0x33e>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <UART_SetConfig+0x326>
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f62:	d006      	beq.n	8003f72 <UART_SetConfig+0x332>
 8003f64:	e00b      	b.n	8003f7e <UART_SetConfig+0x33e>
 8003f66:	2300      	movs	r3, #0
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e00d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e00a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f72:	2304      	movs	r3, #4
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e007      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f78:	2308      	movs	r3, #8
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e004      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f7e:	2310      	movs	r3, #16
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e001      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d15b      	bne.n	800404a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d828      	bhi.n	8003fea <UART_SetConfig+0x3aa>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0x360>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fcd 	.word	0x08003fcd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fdb 	.word	0x08003fdb
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003feb 	.word	0x08003feb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fe fc1a 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e013      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fe fc2a 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	61b8      	str	r0, [r7, #24]
        break;
 8003fd2:	e00f      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <UART_SetConfig+0x4c4>)
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e00c      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe fafd 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8003fde:	61b8      	str	r0, [r7, #24]
        break;
 8003fe0:	e008      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e004      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d074      	beq.n	80040e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	005a      	lsls	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	d916      	bls.n	8004044 <UART_SetConfig+0x404>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401c:	d212      	bcs.n	8004044 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f023 030f 	bic.w	r3, r3, #15
 8004026:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	b29a      	uxth	r2, r3
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	4313      	orrs	r3, r2
 8004038:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	89fa      	ldrh	r2, [r7, #14]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	e04f      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	77bb      	strb	r3, [r7, #30]
 8004048:	e04c      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d828      	bhi.n	80040a2 <UART_SetConfig+0x462>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UART_SetConfig+0x418>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800407d 	.word	0x0800407d
 800405c:	08004085 	.word	0x08004085
 8004060:	0800408d 	.word	0x0800408d
 8004064:	080040a3 	.word	0x080040a3
 8004068:	08004093 	.word	0x08004093
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a3 	.word	0x080040a3
 8004074:	080040a3 	.word	0x080040a3
 8004078:	0800409b 	.word	0x0800409b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7fe fbbe 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e013      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fbce 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8004088:	61b8      	str	r0, [r7, #24]
        break;
 800408a:	e00f      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <UART_SetConfig+0x4c4>)
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e00c      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe faa1 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004096:	61b8      	str	r0, [r7, #24]
        break;
 8004098:	e008      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409e:	61bb      	str	r3, [r7, #24]
        break;
 80040a0:	e004      	b.n	80040ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77bb      	strb	r3, [r7, #30]
        break;
 80040aa:	bf00      	nop
    }

    if (pclk != 0U)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085a      	lsrs	r2, r3, #1
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d909      	bls.n	80040e0 <UART_SetConfig+0x4a0>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d205      	bcs.n	80040e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	e001      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40007c00 	.word	0x40007c00
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400

08004108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01a      	beq.n	800421e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004206:	d10a      	bne.n	800421e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800425c:	f7fd f88a 	bl	8001374 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d10e      	bne.n	800428e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f81b 	bl	80042ba <UART_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e011      	b.n	80042b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b09c      	sub	sp, #112	; 0x70
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	e0a7      	b.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d2:	f000 80a3 	beq.w	800441c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fd f84d 	bl	8001374 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <UART_WaitOnFlagUntilTimeout+0x32>
 80042e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13f      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004300:	667b      	str	r3, [r7, #100]	; 0x64
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800430a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e6      	bne.n	80042ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3308      	adds	r3, #8
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	663b      	str	r3, [r7, #96]	; 0x60
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800433e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e5      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e068      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d050      	beq.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004388:	d148      	bne.n	800441c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	613b      	str	r3, [r7, #16]
   return(result);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043e6:	623a      	str	r2, [r7, #32]
 80043e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	6a3a      	ldr	r2, [r7, #32]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e010      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	f43f af48 	beq.w	80042cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3770      	adds	r7, #112	; 0x70
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004448:	b480      	push	{r7}
 800444a:	b097      	sub	sp, #92	; 0x5c
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	d10e      	bne.n	800449a <UART_Start_Receive_IT+0x52>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <UART_Start_Receive_IT+0x48>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f240 12ff 	movw	r2, #511	; 0x1ff
 800448a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448e:	e02d      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	22ff      	movs	r2, #255	; 0xff
 8004494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004498:	e028      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <UART_Start_Receive_IT+0x76>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <UART_Start_Receive_IT+0x6c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	22ff      	movs	r2, #255	; 0xff
 80044ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b2:	e01b      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	227f      	movs	r2, #127	; 0x7f
 80044b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044bc:	e016      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c6:	d10d      	bne.n	80044e4 <UART_Start_Receive_IT+0x9c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <UART_Start_Receive_IT+0x92>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	227f      	movs	r2, #127	; 0x7f
 80044d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d8:	e008      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	223f      	movs	r2, #63	; 0x3f
 80044de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044e2:	e003      	b.n	80044ec <UART_Start_Receive_IT+0xa4>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2222      	movs	r2, #34	; 0x22
 80044f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800451c:	64ba      	str	r2, [r7, #72]	; 0x48
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800452a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d107      	bne.n	800454a <UART_Start_Receive_IT+0x102>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <UART_Start_Receive_IT+0x184>)
 8004546:	669a      	str	r2, [r3, #104]	; 0x68
 8004548:	e002      	b.n	8004550 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <UART_Start_Receive_IT+0x188>)
 800454e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d019      	beq.n	800458c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800456c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
 8004578:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e6      	bne.n	8004558 <UART_Start_Receive_IT+0x110>
 800458a:	e018      	b.n	80045be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f043 0320 	orr.w	r3, r3, #32
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	375c      	adds	r7, #92	; 0x5c
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	080049f9 	.word	0x080049f9
 80045d0:	08004893 	.word	0x08004893

080045d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b095      	sub	sp, #84	; 0x54
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fa:	643b      	str	r3, [r7, #64]	; 0x40
 80045fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e6      	bne.n	80045dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	61fb      	str	r3, [r7, #28]
   return(result);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004646:	2b01      	cmp	r3, #1
 8004648:	d118      	bne.n	800467c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	60bb      	str	r3, [r7, #8]
   return(result);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0310 	bic.w	r3, r3, #16
 800465e:	647b      	str	r3, [r7, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	613b      	str	r3, [r7, #16]
   return(result);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004690:	bf00      	nop
 8004692:	3754      	adds	r7, #84	; 0x54
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff faaa 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b08f      	sub	sp, #60	; 0x3c
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d14c      	bne.n	8004772 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d132      	bne.n	800474a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004704:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	60bb      	str	r3, [r7, #8]
   return(result);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6979      	ldr	r1, [r7, #20]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	613b      	str	r3, [r7, #16]
   return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e6      	bne.n	8004716 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004748:	e013      	b.n	8004772 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004772:	bf00      	nop
 8004774:	373c      	adds	r7, #60	; 0x3c
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b091      	sub	sp, #68	; 0x44
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d151      	bne.n	8004832 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d132      	bne.n	8004800 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	623b      	str	r3, [r7, #32]
   return(result);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	617b      	str	r3, [r7, #20]
   return(result);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e6      	bne.n	80047cc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047fe:	e018      	b.n	8004832 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	1c9a      	adds	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004832:	bf00      	nop
 8004834:	3744      	adds	r7, #68	; 0x44
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60bb      	str	r3, [r7, #8]
   return(result);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	613b      	str	r3, [r7, #16]
   return(result);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fcf1 	bl	800526c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b096      	sub	sp, #88	; 0x58
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	f040 8098 	bne.w	80049e0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80048be:	b2d9      	uxtb	r1, r3
 80048c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	400a      	ands	r2, r1
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d17b      	bne.n	80049f0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490c:	653b      	str	r3, [r7, #80]	; 0x50
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
 8004918:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800491c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e6      	bne.n	80048f8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	623b      	str	r3, [r7, #32]
   return(result);
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800494a:	633a      	str	r2, [r7, #48]	; 0x30
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e5      	bne.n	800492a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	2b01      	cmp	r3, #1
 8004978:	d12e      	bne.n	80049d8 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	60fb      	str	r3, [r7, #12]
   return(result);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 0310 	bic.w	r3, r3, #16
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	617b      	str	r3, [r7, #20]
   return(result);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e6      	bne.n	8004980 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d103      	bne.n	80049c8 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2210      	movs	r2, #16
 80049c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff f929 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049d6:	e00b      	b.n	80049f0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fc31 	bl	8005240 <HAL_UART_RxCpltCallback>
}
 80049de:	e007      	b.n	80049f0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]
}
 80049f0:	bf00      	nop
 80049f2:	3758      	adds	r7, #88	; 0x58
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b096      	sub	sp, #88	; 0x58
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	f040 8098 	bne.w	8004b46 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004a2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a2e:	4013      	ands	r3, r2
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d17b      	bne.n	8004b56 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d12e      	bne.n	8004b3e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	647b      	str	r3, [r7, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d103      	bne.n	8004b2e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff f876 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b3c:	e00b      	b.n	8004b56 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb7e 	bl	8005240 <HAL_UART_RxCpltCallback>
}
 8004b44:	e007      	b.n	8004b56 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0208 	orr.w	r2, r2, #8
 8004b54:	619a      	str	r2, [r3, #24]
}
 8004b56:	bf00      	nop
 8004b58:	3758      	adds	r7, #88	; 0x58
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b60:	b084      	sub	sp, #16
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	f107 001c 	add.w	r0, r7, #28
 8004b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d120      	bne.n	8004bba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <USB_CoreInit+0xac>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa96 	bl	80050e0 <USB_CoreReset>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e010      	b.n	8004bdc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa8a 	bl	80050e0 <USB_CoreReset>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10b      	bne.n	8004bfa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f043 0206 	orr.w	r2, r3, #6
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c06:	b004      	add	sp, #16
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	ffbdffbf 	.word	0xffbdffbf

08004c10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 0201 	bic.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d115      	bne.n	8004c80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c60:	2001      	movs	r0, #1
 8004c62:	f7fc fb93 	bl	800138c <HAL_Delay>
      ms++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa29 	bl	80050c4 <USB_GetMode>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d01e      	beq.n	8004cb6 <USB_SetCurrentMode+0x84>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b31      	cmp	r3, #49	; 0x31
 8004c7c:	d9f0      	bls.n	8004c60 <USB_SetCurrentMode+0x2e>
 8004c7e:	e01a      	b.n	8004cb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c92:	2001      	movs	r0, #1
 8004c94:	f7fc fb7a 	bl	800138c <HAL_Delay>
      ms++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa10 	bl	80050c4 <USB_GetMode>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <USB_SetCurrentMode+0x84>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b31      	cmp	r3, #49	; 0x31
 8004cae:	d9f0      	bls.n	8004c92 <USB_SetCurrentMode+0x60>
 8004cb0:	e001      	b.n	8004cb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e005      	b.n	8004cc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b32      	cmp	r3, #50	; 0x32
 8004cba:	d101      	bne.n	8004cc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ccc:	b084      	sub	sp, #16
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e009      	b.n	8004d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3340      	adds	r3, #64	; 0x40
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b0e      	cmp	r3, #14
 8004d04:	d9f2      	bls.n	8004cec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11c      	bne.n	8004d46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 0302 	orr.w	r3, r3, #2
 8004d1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e005      	b.n	8004d52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	4619      	mov	r1, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	680b      	ldr	r3, [r1, #0]
 8004d70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d10c      	bne.n	8004d92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f965 	bl	8005050 <USB_SetDevSpeed>
 8004d86:	e008      	b.n	8004d9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d88:	2101      	movs	r1, #1
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f960 	bl	8005050 <USB_SetDevSpeed>
 8004d90:	e003      	b.n	8004d9a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d92:	2103      	movs	r1, #3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f95b 	bl	8005050 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8f3 	bl	8004f88 <USB_FlushTxFifo>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f91f 	bl	8004ff0 <USB_FlushRxFifo>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e043      	b.n	8004e6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfc:	d118      	bne.n	8004e30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e013      	b.n	8004e42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	461a      	mov	r2, r3
 8004e28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e008      	b.n	8004e42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2300      	movs	r3, #0
 8004e52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	461a      	mov	r2, r3
 8004e62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d3b7      	bcc.n	8004de6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	e043      	b.n	8004f04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e92:	d118      	bne.n	8004ec6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e013      	b.n	8004ed8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e008      	b.n	8004ed8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004efc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3b7      	bcc.n	8004e7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f043 0210 	orr.w	r2, r3, #16
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <USB_DevInit+0x2b4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f043 0208 	orr.w	r2, r3, #8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <USB_DevInit+0x2b8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f7c:	b004      	add	sp, #16
 8004f7e:	4770      	bx	lr
 8004f80:	803c3800 	.word	0x803c3800
 8004f84:	40000004 	.word	0x40000004

08004f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <USB_FlushTxFifo+0x64>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e01b      	b.n	8004fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	daf2      	bge.n	8004f96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	019b      	lsls	r3, r3, #6
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <USB_FlushTxFifo+0x64>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e006      	b.n	8004fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d0f0      	beq.n	8004fc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	00030d40 	.word	0x00030d40

08004ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a11      	ldr	r2, [pc, #68]	; (800504c <USB_FlushRxFifo+0x5c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e018      	b.n	8005040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	daf2      	bge.n	8004ffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2210      	movs	r2, #16
 800501e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <USB_FlushRxFifo+0x5c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b10      	cmp	r3, #16
 800503c:	d0f0      	beq.n	8005020 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	00030d40 	.word	0x00030d40

08005050 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800509c:	f023 0303 	bic.w	r3, r3, #3
 80050a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0301 	and.w	r3, r3, #1
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a13      	ldr	r2, [pc, #76]	; (8005144 <USB_CoreReset+0x64>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e01b      	b.n	8005136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	daf2      	bge.n	80050ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <USB_CoreReset+0x64>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e006      	b.n	8005136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	d0f0      	beq.n	8005116 <USB_CoreReset+0x36>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	00030d40 	.word	0x00030d40

08005148 <rtg_main>:

#define STRUCT_SIZE_DATA (sizeof(data))

void print_struct(data_t *ptr);

void rtg_main() {
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	while (TRUE) {
		receive_data();
 800514c:	f000 f82c 	bl	80051a8 <receive_data>
		update_data();
 8005150:	f000 f864 	bl	800521c <update_data>
		send_data();
 8005154:	f000 f802 	bl	800515c <send_data>
		receive_data();
 8005158:	e7f8      	b.n	800514c <rtg_main+0x4>
	...

0800515c <send_data>:
	}
}

void send_data() {
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[STRUCT_SIZE_DATA];
	memcpy(buffer, &data, STRUCT_SIZE_DATA);
 8005166:	4a0d      	ldr	r2, [pc, #52]	; (800519c <send_data+0x40>)
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	ca07      	ldmia	r2, {r0, r1, r2}
 800516c:	c303      	stmia	r3!, {r0, r1}
 800516e:	701a      	strb	r2, [r3, #0]

	for (;;) {
		status = HAL_UART_Transmit_IT(UART_4, buffer,
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	2209      	movs	r2, #9
 8005174:	4619      	mov	r1, r3
 8005176:	480a      	ldr	r0, [pc, #40]	; (80051a0 <send_data+0x44>)
 8005178:	f7fe f9d8 	bl	800352c <HAL_UART_Transmit_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
		STRUCT_SIZE_DATA);
		if (status != HAL_OK) {
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <send_data+0x36>
			printf("Failed HAL_UART_Transmit: %d\n\r", status);
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	4619      	mov	r1, r3
 800518a:	4806      	ldr	r0, [pc, #24]	; (80051a4 <send_data+0x48>)
 800518c:	f000 f92e 	bl	80053ec <iprintf>
		}
		return;
 8005190:	bf00      	nop
 8005192:	bf00      	nop
	}
}
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000778 	.word	0x20000778
 80051a0:	200000cc 	.word	0x200000cc
 80051a4:	08006320 	.word	0x08006320

080051a8 <receive_data>:

void receive_data() {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		uint8_t buffer[STRUCT_SIZE_DATA];
		status = HAL_UART_Receive_IT(UART_4, buffer,
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	2209      	movs	r2, #9
 80051b6:	4619      	mov	r1, r3
 80051b8:	4814      	ldr	r0, [pc, #80]	; (800520c <receive_data+0x64>)
 80051ba:	f7fe fa15 	bl	80035e8 <HAL_UART_Receive_IT>
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
		STRUCT_SIZE_DATA);
		if (status != HAL_OK) {
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <receive_data+0x2a>
			printf("Failed HAL_UART_recivie: %d\n\r", status);
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4810      	ldr	r0, [pc, #64]	; (8005210 <receive_data+0x68>)
 80051ce:	f000 f90d 	bl	80053ec <iprintf>
		}

		if (rx_flag_callback_success) {
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <receive_data+0x6c>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d011      	beq.n	80051fe <receive_data+0x56>
			HAL_UART_Receive_IT(UART_4, buffer, STRUCT_SIZE_DATA);
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	2209      	movs	r2, #9
 80051de:	4619      	mov	r1, r3
 80051e0:	480a      	ldr	r0, [pc, #40]	; (800520c <receive_data+0x64>)
 80051e2:	f7fe fa01 	bl	80035e8 <HAL_UART_Receive_IT>
			memcpy(&data, buffer, STRUCT_SIZE_DATA);
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <receive_data+0x70>)
 80051e8:	1d3a      	adds	r2, r7, #4
 80051ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80051ec:	c303      	stmia	r3!, {r0, r1}
 80051ee:	701a      	strb	r2, [r3, #0]
			print_struct(&data);
 80051f0:	4809      	ldr	r0, [pc, #36]	; (8005218 <receive_data+0x70>)
 80051f2:	f000 f865 	bl	80052c0 <print_struct>
			//return;
			rx_flag_callback_success = FALSE;
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <receive_data+0x6c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
			return;
 80051fc:	e003      	b.n	8005206 <receive_data+0x5e>
		}
		HAL_Delay(DELAY_TIME);
 80051fe:	2064      	movs	r0, #100	; 0x64
 8005200:	f7fc f8c4 	bl	800138c <HAL_Delay>
	for (;;) {
 8005204:	e7d5      	b.n	80051b2 <receive_data+0xa>
	}

}
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200000cc 	.word	0x200000cc
 8005210:	08006340 	.word	0x08006340
 8005214:	20000775 	.word	0x20000775
 8005218:	20000778 	.word	0x20000778

0800521c <update_data>:

void update_data() {
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
	data.m_x = RNG_GetRandomNumber();
 8005220:	f000 f83a 	bl	8005298 <RNG_GetRandomNumber>
 8005224:	4603      	mov	r3, r0
 8005226:	b2da      	uxtb	r2, r3
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <update_data+0x20>)
 800522a:	701a      	strb	r2, [r3, #0]
	data.m_y = RNG_GetRandomNumber();
 800522c:	f000 f834 	bl	8005298 <RNG_GetRandomNumber>
 8005230:	4603      	mov	r3, r0
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b01      	ldr	r3, [pc, #4]	; (800523c <update_data+0x20>)
 8005236:	705a      	strb	r2, [r3, #1]
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000778 	.word	0x20000778

08005240 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { //got info good
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	if (UART_4 == huart) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <HAL_UART_RxCpltCallback+0x24>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d102      	bne.n	8005256 <HAL_UART_RxCpltCallback+0x16>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_BLUE_LED);
		rx_flag_callback_success = TRUE;
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_UART_RxCpltCallback+0x28>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
	}

}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	200000cc 	.word	0x200000cc
 8005268:	20000775 	.word	0x20000775

0800526c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) { // send data good
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	if (UART_4 == huart) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a06      	ldr	r2, [pc, #24]	; (8005290 <HAL_UART_TxCpltCallback+0x24>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d102      	bne.n	8005282 <HAL_UART_TxCpltCallback+0x16>
		tx_flag_callback_success = TRUE;
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_UART_TxCpltCallback+0x28>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
	}
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	200000cc 	.word	0x200000cc
 8005294:	20000774 	.word	0x20000774

08005298 <RNG_GetRandomNumber>:

uint32_t RNG_GetRandomNumber(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	uint32_t random_number;
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) != HAL_OK) {
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4806      	ldr	r0, [pc, #24]	; (80052bc <RNG_GetRandomNumber+0x24>)
 80052a4:	f7fd feec 	bl	8003080 <HAL_RNG_GenerateRandomNumber>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <RNG_GetRandomNumber+0x1a>
		Error_Handler();
 80052ae:	f7fb fc89 	bl	8000bc4 <Error_Handler>
	}
	return random_number;
 80052b2:	687b      	ldr	r3, [r7, #4]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200000bc 	.word	0x200000bc

080052c0 <print_struct>:

void print_struct(data_t *ptr) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	printf("Signal Received: %d\r\n", ptr->m_bit);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	7a1b      	ldrb	r3, [r3, #8]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4803      	ldr	r0, [pc, #12]	; (80052dc <print_struct+0x1c>)
 80052d0:	f000 f88c 	bl	80053ec <iprintf>
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08006360 	.word	0x08006360

080052e0 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) ptr, len, 0xFFFF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4804      	ldr	r0, [pc, #16]	; (8005308 <_write+0x28>)
 80052f8:	f7fd ffd1 	bl	800329e <HAL_UART_Transmit>
	return len;
 80052fc:	687b      	ldr	r3, [r7, #4]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200001dc 	.word	0x200001dc

0800530c <_read>:

// scanf
int _read(int file, char *ptr, int len) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
	int ch = ZERO_VAL;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 800531c:	f107 0114 	add.w	r1, r7, #20
 8005320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005324:	2201      	movs	r2, #1
 8005326:	4817      	ldr	r0, [pc, #92]	; (8005384 <_read+0x78>)
 8005328:	f7fe f83c 	bl	80033a4 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 800532c:	f107 0114 	add.w	r1, r7, #20
 8005330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005334:	2201      	movs	r2, #1
 8005336:	4813      	ldr	r0, [pc, #76]	; (8005384 <_read+0x78>)
 8005338:	f7fd ffb1 	bl	800329e <HAL_UART_Transmit>
	if (ch == THIRTEEN_VAL) {
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b0d      	cmp	r3, #13
 8005340:	d10a      	bne.n	8005358 <_read+0x4c>
		ch = TEN_VAL;
 8005342:	230a      	movs	r3, #10
 8005344:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8005346:	f107 0114 	add.w	r1, r7, #20
 800534a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534e:	2201      	movs	r2, #1
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <_read+0x78>)
 8005352:	f7fd ffa4 	bl	800329e <HAL_UART_Transmit>
 8005356:	e00c      	b.n	8005372 <_read+0x66>
	} else if (ch == BITS_IN_BYTE) {
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d109      	bne.n	8005372 <_read+0x66>
		ch = 0x30;
 800535e:	2330      	movs	r3, #48	; 0x30
 8005360:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8005362:	f107 0114 	add.w	r1, r7, #20
 8005366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800536a:	2201      	movs	r2, #1
 800536c:	4805      	ldr	r0, [pc, #20]	; (8005384 <_read+0x78>)
 800536e:	f7fd ff96 	bl	800329e <HAL_UART_Transmit>
	}

	*ptr = ch;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	701a      	strb	r2, [r3, #0]

	return TRUE;
 800537a:	2301      	movs	r3, #1
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200001dc 	.word	0x200001dc

08005388 <__errno>:
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <__errno+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	2000000c 	.word	0x2000000c

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4d0d      	ldr	r5, [pc, #52]	; (80053cc <__libc_init_array+0x38>)
 8005398:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	2600      	movs	r6, #0
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	4d0b      	ldr	r5, [pc, #44]	; (80053d4 <__libc_init_array+0x40>)
 80053a6:	4c0c      	ldr	r4, [pc, #48]	; (80053d8 <__libc_init_array+0x44>)
 80053a8:	f000 ffae 	bl	8006308 <_init>
 80053ac:	1b64      	subs	r4, r4, r5
 80053ae:	10a4      	asrs	r4, r4, #2
 80053b0:	2600      	movs	r6, #0
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	08006430 	.word	0x08006430
 80053d0:	08006430 	.word	0x08006430
 80053d4:	08006430 	.word	0x08006430
 80053d8:	08006434 	.word	0x08006434

080053dc <memset>:
 80053dc:	4402      	add	r2, r0
 80053de:	4603      	mov	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <iprintf>:
 80053ec:	b40f      	push	{r0, r1, r2, r3}
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <iprintf+0x2c>)
 80053f0:	b513      	push	{r0, r1, r4, lr}
 80053f2:	681c      	ldr	r4, [r3, #0]
 80053f4:	b124      	cbz	r4, 8005400 <iprintf+0x14>
 80053f6:	69a3      	ldr	r3, [r4, #24]
 80053f8:	b913      	cbnz	r3, 8005400 <iprintf+0x14>
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f866 	bl	80054cc <__sinit>
 8005400:	ab05      	add	r3, sp, #20
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	68a1      	ldr	r1, [r4, #8]
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f9bd 	bl	8005788 <_vfiprintf_r>
 800540e:	b002      	add	sp, #8
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	b004      	add	sp, #16
 8005416:	4770      	bx	lr
 8005418:	2000000c 	.word	0x2000000c

0800541c <std>:
 800541c:	2300      	movs	r3, #0
 800541e:	b510      	push	{r4, lr}
 8005420:	4604      	mov	r4, r0
 8005422:	e9c0 3300 	strd	r3, r3, [r0]
 8005426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542a:	6083      	str	r3, [r0, #8]
 800542c:	8181      	strh	r1, [r0, #12]
 800542e:	6643      	str	r3, [r0, #100]	; 0x64
 8005430:	81c2      	strh	r2, [r0, #14]
 8005432:	6183      	str	r3, [r0, #24]
 8005434:	4619      	mov	r1, r3
 8005436:	2208      	movs	r2, #8
 8005438:	305c      	adds	r0, #92	; 0x5c
 800543a:	f7ff ffcf 	bl	80053dc <memset>
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <std+0x38>)
 8005440:	6263      	str	r3, [r4, #36]	; 0x24
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <std+0x3c>)
 8005444:	62a3      	str	r3, [r4, #40]	; 0x28
 8005446:	4b05      	ldr	r3, [pc, #20]	; (800545c <std+0x40>)
 8005448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <std+0x44>)
 800544c:	6224      	str	r4, [r4, #32]
 800544e:	6323      	str	r3, [r4, #48]	; 0x30
 8005450:	bd10      	pop	{r4, pc}
 8005452:	bf00      	nop
 8005454:	08005d31 	.word	0x08005d31
 8005458:	08005d53 	.word	0x08005d53
 800545c:	08005d8b 	.word	0x08005d8b
 8005460:	08005daf 	.word	0x08005daf

08005464 <_cleanup_r>:
 8005464:	4901      	ldr	r1, [pc, #4]	; (800546c <_cleanup_r+0x8>)
 8005466:	f000 b8af 	b.w	80055c8 <_fwalk_reent>
 800546a:	bf00      	nop
 800546c:	08006089 	.word	0x08006089

08005470 <__sfmoreglue>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	2268      	movs	r2, #104	; 0x68
 8005474:	1e4d      	subs	r5, r1, #1
 8005476:	4355      	muls	r5, r2
 8005478:	460e      	mov	r6, r1
 800547a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800547e:	f000 f8e5 	bl	800564c <_malloc_r>
 8005482:	4604      	mov	r4, r0
 8005484:	b140      	cbz	r0, 8005498 <__sfmoreglue+0x28>
 8005486:	2100      	movs	r1, #0
 8005488:	e9c0 1600 	strd	r1, r6, [r0]
 800548c:	300c      	adds	r0, #12
 800548e:	60a0      	str	r0, [r4, #8]
 8005490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005494:	f7ff ffa2 	bl	80053dc <memset>
 8005498:	4620      	mov	r0, r4
 800549a:	bd70      	pop	{r4, r5, r6, pc}

0800549c <__sfp_lock_acquire>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__sfp_lock_acquire+0x8>)
 800549e:	f000 b8b3 	b.w	8005608 <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	20000782 	.word	0x20000782

080054a8 <__sfp_lock_release>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__sfp_lock_release+0x8>)
 80054aa:	f000 b8ae 	b.w	800560a <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000782 	.word	0x20000782

080054b4 <__sinit_lock_acquire>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__sinit_lock_acquire+0x8>)
 80054b6:	f000 b8a7 	b.w	8005608 <__retarget_lock_acquire_recursive>
 80054ba:	bf00      	nop
 80054bc:	20000783 	.word	0x20000783

080054c0 <__sinit_lock_release>:
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <__sinit_lock_release+0x8>)
 80054c2:	f000 b8a2 	b.w	800560a <__retarget_lock_release_recursive>
 80054c6:	bf00      	nop
 80054c8:	20000783 	.word	0x20000783

080054cc <__sinit>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4604      	mov	r4, r0
 80054d0:	f7ff fff0 	bl	80054b4 <__sinit_lock_acquire>
 80054d4:	69a3      	ldr	r3, [r4, #24]
 80054d6:	b11b      	cbz	r3, 80054e0 <__sinit+0x14>
 80054d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054dc:	f7ff bff0 	b.w	80054c0 <__sinit_lock_release>
 80054e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054e4:	6523      	str	r3, [r4, #80]	; 0x50
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <__sinit+0x68>)
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <__sinit+0x6c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	bf04      	itt	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	61a3      	streq	r3, [r4, #24]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f820 	bl	800553c <__sfp>
 80054fc:	6060      	str	r0, [r4, #4]
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 f81c 	bl	800553c <__sfp>
 8005504:	60a0      	str	r0, [r4, #8]
 8005506:	4620      	mov	r0, r4
 8005508:	f000 f818 	bl	800553c <__sfp>
 800550c:	2200      	movs	r2, #0
 800550e:	60e0      	str	r0, [r4, #12]
 8005510:	2104      	movs	r1, #4
 8005512:	6860      	ldr	r0, [r4, #4]
 8005514:	f7ff ff82 	bl	800541c <std>
 8005518:	68a0      	ldr	r0, [r4, #8]
 800551a:	2201      	movs	r2, #1
 800551c:	2109      	movs	r1, #9
 800551e:	f7ff ff7d 	bl	800541c <std>
 8005522:	68e0      	ldr	r0, [r4, #12]
 8005524:	2202      	movs	r2, #2
 8005526:	2112      	movs	r1, #18
 8005528:	f7ff ff78 	bl	800541c <std>
 800552c:	2301      	movs	r3, #1
 800552e:	61a3      	str	r3, [r4, #24]
 8005530:	e7d2      	b.n	80054d8 <__sinit+0xc>
 8005532:	bf00      	nop
 8005534:	08006390 	.word	0x08006390
 8005538:	08005465 	.word	0x08005465

0800553c <__sfp>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	4607      	mov	r7, r0
 8005540:	f7ff ffac 	bl	800549c <__sfp_lock_acquire>
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <__sfp+0x84>)
 8005546:	681e      	ldr	r6, [r3, #0]
 8005548:	69b3      	ldr	r3, [r6, #24]
 800554a:	b913      	cbnz	r3, 8005552 <__sfp+0x16>
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff ffbd 	bl	80054cc <__sinit>
 8005552:	3648      	adds	r6, #72	; 0x48
 8005554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	d503      	bpl.n	8005564 <__sfp+0x28>
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	b30b      	cbz	r3, 80055a4 <__sfp+0x68>
 8005560:	6836      	ldr	r6, [r6, #0]
 8005562:	e7f7      	b.n	8005554 <__sfp+0x18>
 8005564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005568:	b9d5      	cbnz	r5, 80055a0 <__sfp+0x64>
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <__sfp+0x88>)
 800556c:	60e3      	str	r3, [r4, #12]
 800556e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005572:	6665      	str	r5, [r4, #100]	; 0x64
 8005574:	f000 f847 	bl	8005606 <__retarget_lock_init_recursive>
 8005578:	f7ff ff96 	bl	80054a8 <__sfp_lock_release>
 800557c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005584:	6025      	str	r5, [r4, #0]
 8005586:	61a5      	str	r5, [r4, #24]
 8005588:	2208      	movs	r2, #8
 800558a:	4629      	mov	r1, r5
 800558c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005590:	f7ff ff24 	bl	80053dc <memset>
 8005594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800559c:	4620      	mov	r0, r4
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	3468      	adds	r4, #104	; 0x68
 80055a2:	e7d9      	b.n	8005558 <__sfp+0x1c>
 80055a4:	2104      	movs	r1, #4
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ff62 	bl	8005470 <__sfmoreglue>
 80055ac:	4604      	mov	r4, r0
 80055ae:	6030      	str	r0, [r6, #0]
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1d5      	bne.n	8005560 <__sfp+0x24>
 80055b4:	f7ff ff78 	bl	80054a8 <__sfp_lock_release>
 80055b8:	230c      	movs	r3, #12
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	e7ee      	b.n	800559c <__sfp+0x60>
 80055be:	bf00      	nop
 80055c0:	08006390 	.word	0x08006390
 80055c4:	ffff0001 	.word	0xffff0001

080055c8 <_fwalk_reent>:
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055cc:	4606      	mov	r6, r0
 80055ce:	4688      	mov	r8, r1
 80055d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055d4:	2700      	movs	r7, #0
 80055d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055da:	f1b9 0901 	subs.w	r9, r9, #1
 80055de:	d505      	bpl.n	80055ec <_fwalk_reent+0x24>
 80055e0:	6824      	ldr	r4, [r4, #0]
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d1f7      	bne.n	80055d6 <_fwalk_reent+0xe>
 80055e6:	4638      	mov	r0, r7
 80055e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ec:	89ab      	ldrh	r3, [r5, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d907      	bls.n	8005602 <_fwalk_reent+0x3a>
 80055f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f6:	3301      	adds	r3, #1
 80055f8:	d003      	beq.n	8005602 <_fwalk_reent+0x3a>
 80055fa:	4629      	mov	r1, r5
 80055fc:	4630      	mov	r0, r6
 80055fe:	47c0      	blx	r8
 8005600:	4307      	orrs	r7, r0
 8005602:	3568      	adds	r5, #104	; 0x68
 8005604:	e7e9      	b.n	80055da <_fwalk_reent+0x12>

08005606 <__retarget_lock_init_recursive>:
 8005606:	4770      	bx	lr

08005608 <__retarget_lock_acquire_recursive>:
 8005608:	4770      	bx	lr

0800560a <__retarget_lock_release_recursive>:
 800560a:	4770      	bx	lr

0800560c <sbrk_aligned>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4e0e      	ldr	r6, [pc, #56]	; (8005648 <sbrk_aligned+0x3c>)
 8005610:	460c      	mov	r4, r1
 8005612:	6831      	ldr	r1, [r6, #0]
 8005614:	4605      	mov	r5, r0
 8005616:	b911      	cbnz	r1, 800561e <sbrk_aligned+0x12>
 8005618:	f000 fb7a 	bl	8005d10 <_sbrk_r>
 800561c:	6030      	str	r0, [r6, #0]
 800561e:	4621      	mov	r1, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fb75 	bl	8005d10 <_sbrk_r>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d00a      	beq.n	8005640 <sbrk_aligned+0x34>
 800562a:	1cc4      	adds	r4, r0, #3
 800562c:	f024 0403 	bic.w	r4, r4, #3
 8005630:	42a0      	cmp	r0, r4
 8005632:	d007      	beq.n	8005644 <sbrk_aligned+0x38>
 8005634:	1a21      	subs	r1, r4, r0
 8005636:	4628      	mov	r0, r5
 8005638:	f000 fb6a 	bl	8005d10 <_sbrk_r>
 800563c:	3001      	adds	r0, #1
 800563e:	d101      	bne.n	8005644 <sbrk_aligned+0x38>
 8005640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005644:	4620      	mov	r0, r4
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	20000788 	.word	0x20000788

0800564c <_malloc_r>:
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	1ccd      	adds	r5, r1, #3
 8005652:	f025 0503 	bic.w	r5, r5, #3
 8005656:	3508      	adds	r5, #8
 8005658:	2d0c      	cmp	r5, #12
 800565a:	bf38      	it	cc
 800565c:	250c      	movcc	r5, #12
 800565e:	2d00      	cmp	r5, #0
 8005660:	4607      	mov	r7, r0
 8005662:	db01      	blt.n	8005668 <_malloc_r+0x1c>
 8005664:	42a9      	cmp	r1, r5
 8005666:	d905      	bls.n	8005674 <_malloc_r+0x28>
 8005668:	230c      	movs	r3, #12
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	2600      	movs	r6, #0
 800566e:	4630      	mov	r0, r6
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005674:	4e2e      	ldr	r6, [pc, #184]	; (8005730 <_malloc_r+0xe4>)
 8005676:	f000 fdbb 	bl	80061f0 <__malloc_lock>
 800567a:	6833      	ldr	r3, [r6, #0]
 800567c:	461c      	mov	r4, r3
 800567e:	bb34      	cbnz	r4, 80056ce <_malloc_r+0x82>
 8005680:	4629      	mov	r1, r5
 8005682:	4638      	mov	r0, r7
 8005684:	f7ff ffc2 	bl	800560c <sbrk_aligned>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	4604      	mov	r4, r0
 800568c:	d14d      	bne.n	800572a <_malloc_r+0xde>
 800568e:	6834      	ldr	r4, [r6, #0]
 8005690:	4626      	mov	r6, r4
 8005692:	2e00      	cmp	r6, #0
 8005694:	d140      	bne.n	8005718 <_malloc_r+0xcc>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	4631      	mov	r1, r6
 800569a:	4638      	mov	r0, r7
 800569c:	eb04 0803 	add.w	r8, r4, r3
 80056a0:	f000 fb36 	bl	8005d10 <_sbrk_r>
 80056a4:	4580      	cmp	r8, r0
 80056a6:	d13a      	bne.n	800571e <_malloc_r+0xd2>
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	3503      	adds	r5, #3
 80056ac:	1a6d      	subs	r5, r5, r1
 80056ae:	f025 0503 	bic.w	r5, r5, #3
 80056b2:	3508      	adds	r5, #8
 80056b4:	2d0c      	cmp	r5, #12
 80056b6:	bf38      	it	cc
 80056b8:	250c      	movcc	r5, #12
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ffa5 	bl	800560c <sbrk_aligned>
 80056c2:	3001      	adds	r0, #1
 80056c4:	d02b      	beq.n	800571e <_malloc_r+0xd2>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	442b      	add	r3, r5
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	e00e      	b.n	80056ec <_malloc_r+0xa0>
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	1b52      	subs	r2, r2, r5
 80056d2:	d41e      	bmi.n	8005712 <_malloc_r+0xc6>
 80056d4:	2a0b      	cmp	r2, #11
 80056d6:	d916      	bls.n	8005706 <_malloc_r+0xba>
 80056d8:	1961      	adds	r1, r4, r5
 80056da:	42a3      	cmp	r3, r4
 80056dc:	6025      	str	r5, [r4, #0]
 80056de:	bf18      	it	ne
 80056e0:	6059      	strne	r1, [r3, #4]
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	bf08      	it	eq
 80056e6:	6031      	streq	r1, [r6, #0]
 80056e8:	5162      	str	r2, [r4, r5]
 80056ea:	604b      	str	r3, [r1, #4]
 80056ec:	4638      	mov	r0, r7
 80056ee:	f104 060b 	add.w	r6, r4, #11
 80056f2:	f000 fd83 	bl	80061fc <__malloc_unlock>
 80056f6:	f026 0607 	bic.w	r6, r6, #7
 80056fa:	1d23      	adds	r3, r4, #4
 80056fc:	1af2      	subs	r2, r6, r3
 80056fe:	d0b6      	beq.n	800566e <_malloc_r+0x22>
 8005700:	1b9b      	subs	r3, r3, r6
 8005702:	50a3      	str	r3, [r4, r2]
 8005704:	e7b3      	b.n	800566e <_malloc_r+0x22>
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	42a3      	cmp	r3, r4
 800570a:	bf0c      	ite	eq
 800570c:	6032      	streq	r2, [r6, #0]
 800570e:	605a      	strne	r2, [r3, #4]
 8005710:	e7ec      	b.n	80056ec <_malloc_r+0xa0>
 8005712:	4623      	mov	r3, r4
 8005714:	6864      	ldr	r4, [r4, #4]
 8005716:	e7b2      	b.n	800567e <_malloc_r+0x32>
 8005718:	4634      	mov	r4, r6
 800571a:	6876      	ldr	r6, [r6, #4]
 800571c:	e7b9      	b.n	8005692 <_malloc_r+0x46>
 800571e:	230c      	movs	r3, #12
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4638      	mov	r0, r7
 8005724:	f000 fd6a 	bl	80061fc <__malloc_unlock>
 8005728:	e7a1      	b.n	800566e <_malloc_r+0x22>
 800572a:	6025      	str	r5, [r4, #0]
 800572c:	e7de      	b.n	80056ec <_malloc_r+0xa0>
 800572e:	bf00      	nop
 8005730:	20000784 	.word	0x20000784

08005734 <__sfputc_r>:
 8005734:	6893      	ldr	r3, [r2, #8]
 8005736:	3b01      	subs	r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	b410      	push	{r4}
 800573c:	6093      	str	r3, [r2, #8]
 800573e:	da08      	bge.n	8005752 <__sfputc_r+0x1e>
 8005740:	6994      	ldr	r4, [r2, #24]
 8005742:	42a3      	cmp	r3, r4
 8005744:	db01      	blt.n	800574a <__sfputc_r+0x16>
 8005746:	290a      	cmp	r1, #10
 8005748:	d103      	bne.n	8005752 <__sfputc_r+0x1e>
 800574a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800574e:	f000 bb33 	b.w	8005db8 <__swbuf_r>
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	1c58      	adds	r0, r3, #1
 8005756:	6010      	str	r0, [r2, #0]
 8005758:	7019      	strb	r1, [r3, #0]
 800575a:	4608      	mov	r0, r1
 800575c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005760:	4770      	bx	lr

08005762 <__sfputs_r>:
 8005762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005764:	4606      	mov	r6, r0
 8005766:	460f      	mov	r7, r1
 8005768:	4614      	mov	r4, r2
 800576a:	18d5      	adds	r5, r2, r3
 800576c:	42ac      	cmp	r4, r5
 800576e:	d101      	bne.n	8005774 <__sfputs_r+0x12>
 8005770:	2000      	movs	r0, #0
 8005772:	e007      	b.n	8005784 <__sfputs_r+0x22>
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	463a      	mov	r2, r7
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff ffda 	bl	8005734 <__sfputc_r>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d1f3      	bne.n	800576c <__sfputs_r+0xa>
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005788 <_vfiprintf_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	460d      	mov	r5, r1
 800578e:	b09d      	sub	sp, #116	; 0x74
 8005790:	4614      	mov	r4, r2
 8005792:	4698      	mov	r8, r3
 8005794:	4606      	mov	r6, r0
 8005796:	b118      	cbz	r0, 80057a0 <_vfiprintf_r+0x18>
 8005798:	6983      	ldr	r3, [r0, #24]
 800579a:	b90b      	cbnz	r3, 80057a0 <_vfiprintf_r+0x18>
 800579c:	f7ff fe96 	bl	80054cc <__sinit>
 80057a0:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <_vfiprintf_r+0x240>)
 80057a2:	429d      	cmp	r5, r3
 80057a4:	d11b      	bne.n	80057de <_vfiprintf_r+0x56>
 80057a6:	6875      	ldr	r5, [r6, #4]
 80057a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057aa:	07d9      	lsls	r1, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_vfiprintf_r+0x32>
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	059a      	lsls	r2, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_vfiprintf_r+0x32>
 80057b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b6:	f7ff ff27 	bl	8005608 <__retarget_lock_acquire_recursive>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	071b      	lsls	r3, r3, #28
 80057be:	d501      	bpl.n	80057c4 <_vfiprintf_r+0x3c>
 80057c0:	692b      	ldr	r3, [r5, #16]
 80057c2:	b9eb      	cbnz	r3, 8005800 <_vfiprintf_r+0x78>
 80057c4:	4629      	mov	r1, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	f000 fb5a 	bl	8005e80 <__swsetup_r>
 80057cc:	b1c0      	cbz	r0, 8005800 <_vfiprintf_r+0x78>
 80057ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d0:	07dc      	lsls	r4, r3, #31
 80057d2:	d50e      	bpl.n	80057f2 <_vfiprintf_r+0x6a>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d8:	b01d      	add	sp, #116	; 0x74
 80057da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057de:	4b7b      	ldr	r3, [pc, #492]	; (80059cc <_vfiprintf_r+0x244>)
 80057e0:	429d      	cmp	r5, r3
 80057e2:	d101      	bne.n	80057e8 <_vfiprintf_r+0x60>
 80057e4:	68b5      	ldr	r5, [r6, #8]
 80057e6:	e7df      	b.n	80057a8 <_vfiprintf_r+0x20>
 80057e8:	4b79      	ldr	r3, [pc, #484]	; (80059d0 <_vfiprintf_r+0x248>)
 80057ea:	429d      	cmp	r5, r3
 80057ec:	bf08      	it	eq
 80057ee:	68f5      	ldreq	r5, [r6, #12]
 80057f0:	e7da      	b.n	80057a8 <_vfiprintf_r+0x20>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	0598      	lsls	r0, r3, #22
 80057f6:	d4ed      	bmi.n	80057d4 <_vfiprintf_r+0x4c>
 80057f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057fa:	f7ff ff06 	bl	800560a <__retarget_lock_release_recursive>
 80057fe:	e7e9      	b.n	80057d4 <_vfiprintf_r+0x4c>
 8005800:	2300      	movs	r3, #0
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
 8005804:	2320      	movs	r3, #32
 8005806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800580a:	f8cd 800c 	str.w	r8, [sp, #12]
 800580e:	2330      	movs	r3, #48	; 0x30
 8005810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059d4 <_vfiprintf_r+0x24c>
 8005814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	4623      	mov	r3, r4
 800581e:	469a      	mov	sl, r3
 8005820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005824:	b10a      	cbz	r2, 800582a <_vfiprintf_r+0xa2>
 8005826:	2a25      	cmp	r2, #37	; 0x25
 8005828:	d1f9      	bne.n	800581e <_vfiprintf_r+0x96>
 800582a:	ebba 0b04 	subs.w	fp, sl, r4
 800582e:	d00b      	beq.n	8005848 <_vfiprintf_r+0xc0>
 8005830:	465b      	mov	r3, fp
 8005832:	4622      	mov	r2, r4
 8005834:	4629      	mov	r1, r5
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff ff93 	bl	8005762 <__sfputs_r>
 800583c:	3001      	adds	r0, #1
 800583e:	f000 80aa 	beq.w	8005996 <_vfiprintf_r+0x20e>
 8005842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005844:	445a      	add	r2, fp
 8005846:	9209      	str	r2, [sp, #36]	; 0x24
 8005848:	f89a 3000 	ldrb.w	r3, [sl]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80a2 	beq.w	8005996 <_vfiprintf_r+0x20e>
 8005852:	2300      	movs	r3, #0
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800585c:	f10a 0a01 	add.w	sl, sl, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	9307      	str	r3, [sp, #28]
 8005864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005868:	931a      	str	r3, [sp, #104]	; 0x68
 800586a:	4654      	mov	r4, sl
 800586c:	2205      	movs	r2, #5
 800586e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005872:	4858      	ldr	r0, [pc, #352]	; (80059d4 <_vfiprintf_r+0x24c>)
 8005874:	f7fa fccc 	bl	8000210 <memchr>
 8005878:	9a04      	ldr	r2, [sp, #16]
 800587a:	b9d8      	cbnz	r0, 80058b4 <_vfiprintf_r+0x12c>
 800587c:	06d1      	lsls	r1, r2, #27
 800587e:	bf44      	itt	mi
 8005880:	2320      	movmi	r3, #32
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005886:	0713      	lsls	r3, r2, #28
 8005888:	bf44      	itt	mi
 800588a:	232b      	movmi	r3, #43	; 0x2b
 800588c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005890:	f89a 3000 	ldrb.w	r3, [sl]
 8005894:	2b2a      	cmp	r3, #42	; 0x2a
 8005896:	d015      	beq.n	80058c4 <_vfiprintf_r+0x13c>
 8005898:	9a07      	ldr	r2, [sp, #28]
 800589a:	4654      	mov	r4, sl
 800589c:	2000      	movs	r0, #0
 800589e:	f04f 0c0a 	mov.w	ip, #10
 80058a2:	4621      	mov	r1, r4
 80058a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a8:	3b30      	subs	r3, #48	; 0x30
 80058aa:	2b09      	cmp	r3, #9
 80058ac:	d94e      	bls.n	800594c <_vfiprintf_r+0x1c4>
 80058ae:	b1b0      	cbz	r0, 80058de <_vfiprintf_r+0x156>
 80058b0:	9207      	str	r2, [sp, #28]
 80058b2:	e014      	b.n	80058de <_vfiprintf_r+0x156>
 80058b4:	eba0 0308 	sub.w	r3, r0, r8
 80058b8:	fa09 f303 	lsl.w	r3, r9, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	46a2      	mov	sl, r4
 80058c2:	e7d2      	b.n	800586a <_vfiprintf_r+0xe2>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	1d19      	adds	r1, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	9103      	str	r1, [sp, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfbb      	ittet	lt
 80058d0:	425b      	neglt	r3, r3
 80058d2:	f042 0202 	orrlt.w	r2, r2, #2
 80058d6:	9307      	strge	r3, [sp, #28]
 80058d8:	9307      	strlt	r3, [sp, #28]
 80058da:	bfb8      	it	lt
 80058dc:	9204      	strlt	r2, [sp, #16]
 80058de:	7823      	ldrb	r3, [r4, #0]
 80058e0:	2b2e      	cmp	r3, #46	; 0x2e
 80058e2:	d10c      	bne.n	80058fe <_vfiprintf_r+0x176>
 80058e4:	7863      	ldrb	r3, [r4, #1]
 80058e6:	2b2a      	cmp	r3, #42	; 0x2a
 80058e8:	d135      	bne.n	8005956 <_vfiprintf_r+0x1ce>
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	1d1a      	adds	r2, r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9203      	str	r2, [sp, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfb8      	it	lt
 80058f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058fa:	3402      	adds	r4, #2
 80058fc:	9305      	str	r3, [sp, #20]
 80058fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059e4 <_vfiprintf_r+0x25c>
 8005902:	7821      	ldrb	r1, [r4, #0]
 8005904:	2203      	movs	r2, #3
 8005906:	4650      	mov	r0, sl
 8005908:	f7fa fc82 	bl	8000210 <memchr>
 800590c:	b140      	cbz	r0, 8005920 <_vfiprintf_r+0x198>
 800590e:	2340      	movs	r3, #64	; 0x40
 8005910:	eba0 000a 	sub.w	r0, r0, sl
 8005914:	fa03 f000 	lsl.w	r0, r3, r0
 8005918:	9b04      	ldr	r3, [sp, #16]
 800591a:	4303      	orrs	r3, r0
 800591c:	3401      	adds	r4, #1
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005924:	482c      	ldr	r0, [pc, #176]	; (80059d8 <_vfiprintf_r+0x250>)
 8005926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800592a:	2206      	movs	r2, #6
 800592c:	f7fa fc70 	bl	8000210 <memchr>
 8005930:	2800      	cmp	r0, #0
 8005932:	d03f      	beq.n	80059b4 <_vfiprintf_r+0x22c>
 8005934:	4b29      	ldr	r3, [pc, #164]	; (80059dc <_vfiprintf_r+0x254>)
 8005936:	bb1b      	cbnz	r3, 8005980 <_vfiprintf_r+0x1f8>
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	3307      	adds	r3, #7
 800593c:	f023 0307 	bic.w	r3, r3, #7
 8005940:	3308      	adds	r3, #8
 8005942:	9303      	str	r3, [sp, #12]
 8005944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005946:	443b      	add	r3, r7
 8005948:	9309      	str	r3, [sp, #36]	; 0x24
 800594a:	e767      	b.n	800581c <_vfiprintf_r+0x94>
 800594c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005950:	460c      	mov	r4, r1
 8005952:	2001      	movs	r0, #1
 8005954:	e7a5      	b.n	80058a2 <_vfiprintf_r+0x11a>
 8005956:	2300      	movs	r3, #0
 8005958:	3401      	adds	r4, #1
 800595a:	9305      	str	r3, [sp, #20]
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 0c0a 	mov.w	ip, #10
 8005962:	4620      	mov	r0, r4
 8005964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005968:	3a30      	subs	r2, #48	; 0x30
 800596a:	2a09      	cmp	r2, #9
 800596c:	d903      	bls.n	8005976 <_vfiprintf_r+0x1ee>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0c5      	beq.n	80058fe <_vfiprintf_r+0x176>
 8005972:	9105      	str	r1, [sp, #20]
 8005974:	e7c3      	b.n	80058fe <_vfiprintf_r+0x176>
 8005976:	fb0c 2101 	mla	r1, ip, r1, r2
 800597a:	4604      	mov	r4, r0
 800597c:	2301      	movs	r3, #1
 800597e:	e7f0      	b.n	8005962 <_vfiprintf_r+0x1da>
 8005980:	ab03      	add	r3, sp, #12
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	462a      	mov	r2, r5
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <_vfiprintf_r+0x258>)
 8005988:	a904      	add	r1, sp, #16
 800598a:	4630      	mov	r0, r6
 800598c:	f3af 8000 	nop.w
 8005990:	4607      	mov	r7, r0
 8005992:	1c78      	adds	r0, r7, #1
 8005994:	d1d6      	bne.n	8005944 <_vfiprintf_r+0x1bc>
 8005996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005998:	07d9      	lsls	r1, r3, #31
 800599a:	d405      	bmi.n	80059a8 <_vfiprintf_r+0x220>
 800599c:	89ab      	ldrh	r3, [r5, #12]
 800599e:	059a      	lsls	r2, r3, #22
 80059a0:	d402      	bmi.n	80059a8 <_vfiprintf_r+0x220>
 80059a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059a4:	f7ff fe31 	bl	800560a <__retarget_lock_release_recursive>
 80059a8:	89ab      	ldrh	r3, [r5, #12]
 80059aa:	065b      	lsls	r3, r3, #25
 80059ac:	f53f af12 	bmi.w	80057d4 <_vfiprintf_r+0x4c>
 80059b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059b2:	e711      	b.n	80057d8 <_vfiprintf_r+0x50>
 80059b4:	ab03      	add	r3, sp, #12
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	462a      	mov	r2, r5
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <_vfiprintf_r+0x258>)
 80059bc:	a904      	add	r1, sp, #16
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 f880 	bl	8005ac4 <_printf_i>
 80059c4:	e7e4      	b.n	8005990 <_vfiprintf_r+0x208>
 80059c6:	bf00      	nop
 80059c8:	080063b4 	.word	0x080063b4
 80059cc:	080063d4 	.word	0x080063d4
 80059d0:	08006394 	.word	0x08006394
 80059d4:	080063f4 	.word	0x080063f4
 80059d8:	080063fe 	.word	0x080063fe
 80059dc:	00000000 	.word	0x00000000
 80059e0:	08005763 	.word	0x08005763
 80059e4:	080063fa 	.word	0x080063fa

080059e8 <_printf_common>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	4616      	mov	r6, r2
 80059ee:	4699      	mov	r9, r3
 80059f0:	688a      	ldr	r2, [r1, #8]
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bfb8      	it	lt
 80059fc:	4613      	movlt	r3, r2
 80059fe:	6033      	str	r3, [r6, #0]
 8005a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a04:	4607      	mov	r7, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b10a      	cbz	r2, 8005a0e <_printf_common+0x26>
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	0699      	lsls	r1, r3, #26
 8005a12:	bf42      	ittt	mi
 8005a14:	6833      	ldrmi	r3, [r6, #0]
 8005a16:	3302      	addmi	r3, #2
 8005a18:	6033      	strmi	r3, [r6, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	f015 0506 	ands.w	r5, r5, #6
 8005a20:	d106      	bne.n	8005a30 <_printf_common+0x48>
 8005a22:	f104 0a19 	add.w	sl, r4, #25
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	6832      	ldr	r2, [r6, #0]
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc26      	bgt.n	8005a7e <_printf_common+0x96>
 8005a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a34:	1e13      	subs	r3, r2, #0
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	bf18      	it	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	0692      	lsls	r2, r2, #26
 8005a3e:	d42b      	bmi.n	8005a98 <_printf_common+0xb0>
 8005a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a44:	4649      	mov	r1, r9
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d01e      	beq.n	8005a8c <_printf_common+0xa4>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	68e5      	ldr	r5, [r4, #12]
 8005a52:	6832      	ldr	r2, [r6, #0]
 8005a54:	f003 0306 	and.w	r3, r3, #6
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	bf08      	it	eq
 8005a5c:	1aad      	subeq	r5, r5, r2
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	bf0c      	ite	eq
 8005a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a68:	2500      	movne	r5, #0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	bfc4      	itt	gt
 8005a6e:	1a9b      	subgt	r3, r3, r2
 8005a70:	18ed      	addgt	r5, r5, r3
 8005a72:	2600      	movs	r6, #0
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xc8>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xa8>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4649      	mov	r1, r9
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xac>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c6      	b.n	8005a26 <_printf_common+0x3e>
 8005a98:	18e1      	adds	r1, r4, r3
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	2030      	movs	r0, #48	; 0x30
 8005a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aa2:	4422      	add	r2, r4
 8005aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aac:	3302      	adds	r3, #2
 8005aae:	e7c7      	b.n	8005a40 <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa4>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x8e>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005acc:	2f78      	cmp	r7, #120	; 0x78
 8005ace:	4691      	mov	r9, r2
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	; 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d8 	beq.w	8005c96 <_printf_i+0x1d2>
 8005ae6:	2f58      	cmp	r7, #88	; 0x58
 8005ae8:	f000 80a3 	beq.w	8005c32 <_printf_i+0x16e>
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c7d 	.word	0x08005c7d
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005c5f 	.word	0x08005c5f
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005c9f 	.word	0x08005c9f
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c67 	.word	0x08005c67
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a3      	b.n	8005cb8 <_printf_i+0x1f4>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	0606      	lsls	r6, r0, #24
 8005b76:	f101 0304 	add.w	r3, r1, #4
 8005b7a:	d50a      	bpl.n	8005b92 <_printf_i+0xce>
 8005b7c:	680e      	ldr	r6, [r1, #0]
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	2e00      	cmp	r6, #0
 8005b82:	da03      	bge.n	8005b8c <_printf_i+0xc8>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	4276      	negs	r6, r6
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	485e      	ldr	r0, [pc, #376]	; (8005d08 <_printf_i+0x244>)
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e019      	b.n	8005bc6 <_printf_i+0x102>
 8005b92:	680e      	ldr	r6, [r1, #0]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b9a:	bf18      	it	ne
 8005b9c:	b236      	sxthne	r6, r6
 8005b9e:	e7ef      	b.n	8005b80 <_printf_i+0xbc>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	1d19      	adds	r1, r3, #4
 8005ba6:	6029      	str	r1, [r5, #0]
 8005ba8:	0601      	lsls	r1, r0, #24
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0xec>
 8005bac:	681e      	ldr	r6, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0xf2>
 8005bb0:	0646      	lsls	r6, r0, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0xe8>
 8005bb4:	881e      	ldrh	r6, [r3, #0]
 8005bb6:	4854      	ldr	r0, [pc, #336]	; (8005d08 <_printf_i+0x244>)
 8005bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bba:	bf0c      	ite	eq
 8005bbc:	2308      	moveq	r3, #8
 8005bbe:	230a      	movne	r3, #10
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc6:	6865      	ldr	r5, [r4, #4]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	bfa2      	ittt	ge
 8005bce:	6821      	ldrge	r1, [r4, #0]
 8005bd0:	f021 0104 	bicge.w	r1, r1, #4
 8005bd4:	6021      	strge	r1, [r4, #0]
 8005bd6:	b90e      	cbnz	r6, 8005bdc <_printf_i+0x118>
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	d04d      	beq.n	8005c78 <_printf_i+0x1b4>
 8005bdc:	4615      	mov	r5, r2
 8005bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8005be2:	fb03 6711 	mls	r7, r3, r1, r6
 8005be6:	5dc7      	ldrb	r7, [r0, r7]
 8005be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bec:	4637      	mov	r7, r6
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	460e      	mov	r6, r1
 8005bf2:	d9f4      	bls.n	8005bde <_printf_i+0x11a>
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d10b      	bne.n	8005c10 <_printf_i+0x14c>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	07de      	lsls	r6, r3, #31
 8005bfc:	d508      	bpl.n	8005c10 <_printf_i+0x14c>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6861      	ldr	r1, [r4, #4]
 8005c02:	4299      	cmp	r1, r3
 8005c04:	bfde      	ittt	le
 8005c06:	2330      	movle	r3, #48	; 0x30
 8005c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c10:	1b52      	subs	r2, r2, r5
 8005c12:	6122      	str	r2, [r4, #16]
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	464b      	mov	r3, r9
 8005c1a:	aa03      	add	r2, sp, #12
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f7ff fee2 	bl	80059e8 <_printf_common>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d14c      	bne.n	8005cc2 <_printf_i+0x1fe>
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2c:	b004      	add	sp, #16
 8005c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c32:	4835      	ldr	r0, [pc, #212]	; (8005d08 <_printf_i+0x244>)
 8005c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c40:	6029      	str	r1, [r5, #0]
 8005c42:	061d      	lsls	r5, r3, #24
 8005c44:	d514      	bpl.n	8005c70 <_printf_i+0x1ac>
 8005c46:	07df      	lsls	r7, r3, #31
 8005c48:	bf44      	itt	mi
 8005c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c4e:	6023      	strmi	r3, [r4, #0]
 8005c50:	b91e      	cbnz	r6, 8005c5a <_printf_i+0x196>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f023 0320 	bic.w	r3, r3, #32
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	e7b0      	b.n	8005bc0 <_printf_i+0xfc>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2378      	movs	r3, #120	; 0x78
 8005c68:	4828      	ldr	r0, [pc, #160]	; (8005d0c <_printf_i+0x248>)
 8005c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6e:	e7e3      	b.n	8005c38 <_printf_i+0x174>
 8005c70:	0659      	lsls	r1, r3, #25
 8005c72:	bf48      	it	mi
 8005c74:	b2b6      	uxthmi	r6, r6
 8005c76:	e7e6      	b.n	8005c46 <_printf_i+0x182>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	e7bb      	b.n	8005bf4 <_printf_i+0x130>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	6826      	ldr	r6, [r4, #0]
 8005c80:	6961      	ldr	r1, [r4, #20]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6028      	str	r0, [r5, #0]
 8005c86:	0635      	lsls	r5, r6, #24
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0x1cc>
 8005c8c:	6019      	str	r1, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0x1d2>
 8005c90:	0670      	lsls	r0, r6, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0x1c8>
 8005c94:	8019      	strh	r1, [r3, #0]
 8005c96:	2300      	movs	r3, #0
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7ba      	b.n	8005c14 <_printf_i+0x150>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fab0 	bl	8000210 <memchr>
 8005cb0:	b108      	cbz	r0, 8005cb6 <_printf_i+0x1f2>
 8005cb2:	1b40      	subs	r0, r0, r5
 8005cb4:	6060      	str	r0, [r4, #4]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	e7a8      	b.n	8005c14 <_printf_i+0x150>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d0ab      	beq.n	8005c28 <_printf_i+0x164>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	d413      	bmi.n	8005cfe <_printf_i+0x23a>
 8005cd6:	68e0      	ldr	r0, [r4, #12]
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	bfb8      	it	lt
 8005cde:	4618      	movlt	r0, r3
 8005ce0:	e7a4      	b.n	8005c2c <_printf_i+0x168>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d09b      	beq.n	8005c28 <_printf_i+0x164>
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	9903      	ldr	r1, [sp, #12]
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	dcf2      	bgt.n	8005ce2 <_printf_i+0x21e>
 8005cfc:	e7eb      	b.n	8005cd6 <_printf_i+0x212>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	f104 0619 	add.w	r6, r4, #25
 8005d04:	e7f5      	b.n	8005cf2 <_printf_i+0x22e>
 8005d06:	bf00      	nop
 8005d08:	08006405 	.word	0x08006405
 8005d0c:	08006416 	.word	0x08006416

08005d10 <_sbrk_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_sbrk_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb fa68 	bl	80011f0 <_sbrk>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_sbrk_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_sbrk_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	2000078c 	.word	0x2000078c

08005d30 <__sread>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	460c      	mov	r4, r1
 8005d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d38:	f000 fab2 	bl	80062a0 <_read_r>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	bfab      	itete	ge
 8005d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d42:	89a3      	ldrhlt	r3, [r4, #12]
 8005d44:	181b      	addge	r3, r3, r0
 8005d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d4a:	bfac      	ite	ge
 8005d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d4e:	81a3      	strhlt	r3, [r4, #12]
 8005d50:	bd10      	pop	{r4, pc}

08005d52 <__swrite>:
 8005d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d56:	461f      	mov	r7, r3
 8005d58:	898b      	ldrh	r3, [r1, #12]
 8005d5a:	05db      	lsls	r3, r3, #23
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	4616      	mov	r6, r2
 8005d62:	d505      	bpl.n	8005d70 <__swrite+0x1e>
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f000 f9c8 	bl	8006100 <_lseek_r>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	4628      	mov	r0, r5
 8005d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d86:	f000 b869 	b.w	8005e5c <_write_r>

08005d8a <__sseek>:
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d92:	f000 f9b5 	bl	8006100 <_lseek_r>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	bf15      	itete	ne
 8005d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005da6:	81a3      	strheq	r3, [r4, #12]
 8005da8:	bf18      	it	ne
 8005daa:	81a3      	strhne	r3, [r4, #12]
 8005dac:	bd10      	pop	{r4, pc}

08005dae <__sclose>:
 8005dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db2:	f000 b8d3 	b.w	8005f5c <_close_r>
	...

08005db8 <__swbuf_r>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	460e      	mov	r6, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	b118      	cbz	r0, 8005dca <__swbuf_r+0x12>
 8005dc2:	6983      	ldr	r3, [r0, #24]
 8005dc4:	b90b      	cbnz	r3, 8005dca <__swbuf_r+0x12>
 8005dc6:	f7ff fb81 	bl	80054cc <__sinit>
 8005dca:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <__swbuf_r+0x98>)
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	d12b      	bne.n	8005e28 <__swbuf_r+0x70>
 8005dd0:	686c      	ldr	r4, [r5, #4]
 8005dd2:	69a3      	ldr	r3, [r4, #24]
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	071a      	lsls	r2, r3, #28
 8005dda:	d52f      	bpl.n	8005e3c <__swbuf_r+0x84>
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	b36b      	cbz	r3, 8005e3c <__swbuf_r+0x84>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	6820      	ldr	r0, [r4, #0]
 8005de4:	1ac0      	subs	r0, r0, r3
 8005de6:	6963      	ldr	r3, [r4, #20]
 8005de8:	b2f6      	uxtb	r6, r6
 8005dea:	4283      	cmp	r3, r0
 8005dec:	4637      	mov	r7, r6
 8005dee:	dc04      	bgt.n	8005dfa <__swbuf_r+0x42>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f948 	bl	8006088 <_fflush_r>
 8005df8:	bb30      	cbnz	r0, 8005e48 <__swbuf_r+0x90>
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	701e      	strb	r6, [r3, #0]
 8005e08:	6963      	ldr	r3, [r4, #20]
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	d004      	beq.n	8005e1a <__swbuf_r+0x62>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	07db      	lsls	r3, r3, #31
 8005e14:	d506      	bpl.n	8005e24 <__swbuf_r+0x6c>
 8005e16:	2e0a      	cmp	r6, #10
 8005e18:	d104      	bne.n	8005e24 <__swbuf_r+0x6c>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 f933 	bl	8006088 <_fflush_r>
 8005e22:	b988      	cbnz	r0, 8005e48 <__swbuf_r+0x90>
 8005e24:	4638      	mov	r0, r7
 8005e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <__swbuf_r+0x9c>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d101      	bne.n	8005e32 <__swbuf_r+0x7a>
 8005e2e:	68ac      	ldr	r4, [r5, #8]
 8005e30:	e7cf      	b.n	8005dd2 <__swbuf_r+0x1a>
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <__swbuf_r+0xa0>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	bf08      	it	eq
 8005e38:	68ec      	ldreq	r4, [r5, #12]
 8005e3a:	e7ca      	b.n	8005dd2 <__swbuf_r+0x1a>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f81e 	bl	8005e80 <__swsetup_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0cb      	beq.n	8005de0 <__swbuf_r+0x28>
 8005e48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e4c:	e7ea      	b.n	8005e24 <__swbuf_r+0x6c>
 8005e4e:	bf00      	nop
 8005e50:	080063b4 	.word	0x080063b4
 8005e54:	080063d4 	.word	0x080063d4
 8005e58:	08006394 	.word	0x08006394

08005e5c <_write_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <_write_r+0x20>)
 8005e60:	4604      	mov	r4, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7ff fa38 	bl	80052e0 <_write>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_write_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_write_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	2000078c 	.word	0x2000078c

08005e80 <__swsetup_r>:
 8005e80:	4b32      	ldr	r3, [pc, #200]	; (8005f4c <__swsetup_r+0xcc>)
 8005e82:	b570      	push	{r4, r5, r6, lr}
 8005e84:	681d      	ldr	r5, [r3, #0]
 8005e86:	4606      	mov	r6, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	b125      	cbz	r5, 8005e96 <__swsetup_r+0x16>
 8005e8c:	69ab      	ldr	r3, [r5, #24]
 8005e8e:	b913      	cbnz	r3, 8005e96 <__swsetup_r+0x16>
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff fb1b 	bl	80054cc <__sinit>
 8005e96:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <__swsetup_r+0xd0>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d10f      	bne.n	8005ebc <__swsetup_r+0x3c>
 8005e9c:	686c      	ldr	r4, [r5, #4]
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d42c      	bmi.n	8005f02 <__swsetup_r+0x82>
 8005ea8:	06dd      	lsls	r5, r3, #27
 8005eaa:	d411      	bmi.n	8005ed0 <__swsetup_r+0x50>
 8005eac:	2309      	movs	r3, #9
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eba:	e03e      	b.n	8005f3a <__swsetup_r+0xba>
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <__swsetup_r+0xd4>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d101      	bne.n	8005ec6 <__swsetup_r+0x46>
 8005ec2:	68ac      	ldr	r4, [r5, #8]
 8005ec4:	e7eb      	b.n	8005e9e <__swsetup_r+0x1e>
 8005ec6:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <__swsetup_r+0xd8>)
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	bf08      	it	eq
 8005ecc:	68ec      	ldreq	r4, [r5, #12]
 8005ece:	e7e6      	b.n	8005e9e <__swsetup_r+0x1e>
 8005ed0:	0758      	lsls	r0, r3, #29
 8005ed2:	d512      	bpl.n	8005efa <__swsetup_r+0x7a>
 8005ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed6:	b141      	cbz	r1, 8005eea <__swsetup_r+0x6a>
 8005ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005edc:	4299      	cmp	r1, r3
 8005ede:	d002      	beq.n	8005ee6 <__swsetup_r+0x66>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 f991 	bl	8006208 <_free_r>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	f043 0308 	orr.w	r3, r3, #8
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	b94b      	cbnz	r3, 8005f1a <__swsetup_r+0x9a>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f10:	d003      	beq.n	8005f1a <__swsetup_r+0x9a>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f92b 	bl	8006170 <__smakebuf_r>
 8005f1a:	89a0      	ldrh	r0, [r4, #12]
 8005f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f20:	f010 0301 	ands.w	r3, r0, #1
 8005f24:	d00a      	beq.n	8005f3c <__swsetup_r+0xbc>
 8005f26:	2300      	movs	r3, #0
 8005f28:	60a3      	str	r3, [r4, #8]
 8005f2a:	6963      	ldr	r3, [r4, #20]
 8005f2c:	425b      	negs	r3, r3
 8005f2e:	61a3      	str	r3, [r4, #24]
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	b943      	cbnz	r3, 8005f46 <__swsetup_r+0xc6>
 8005f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f38:	d1ba      	bne.n	8005eb0 <__swsetup_r+0x30>
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	0781      	lsls	r1, r0, #30
 8005f3e:	bf58      	it	pl
 8005f40:	6963      	ldrpl	r3, [r4, #20]
 8005f42:	60a3      	str	r3, [r4, #8]
 8005f44:	e7f4      	b.n	8005f30 <__swsetup_r+0xb0>
 8005f46:	2000      	movs	r0, #0
 8005f48:	e7f7      	b.n	8005f3a <__swsetup_r+0xba>
 8005f4a:	bf00      	nop
 8005f4c:	2000000c 	.word	0x2000000c
 8005f50:	080063b4 	.word	0x080063b4
 8005f54:	080063d4 	.word	0x080063d4
 8005f58:	08006394 	.word	0x08006394

08005f5c <_close_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_close_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fb f90e 	bl	8001188 <_close>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_close_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_close_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000078c 	.word	0x2000078c

08005f7c <__sflush_r>:
 8005f7c:	898a      	ldrh	r2, [r1, #12]
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	4605      	mov	r5, r0
 8005f84:	0710      	lsls	r0, r2, #28
 8005f86:	460c      	mov	r4, r1
 8005f88:	d458      	bmi.n	800603c <__sflush_r+0xc0>
 8005f8a:	684b      	ldr	r3, [r1, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dc05      	bgt.n	8005f9c <__sflush_r+0x20>
 8005f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dc02      	bgt.n	8005f9c <__sflush_r+0x20>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	d0f9      	beq.n	8005f96 <__sflush_r+0x1a>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fa8:	682f      	ldr	r7, [r5, #0]
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	d032      	beq.n	8006014 <__sflush_r+0x98>
 8005fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	075a      	lsls	r2, r3, #29
 8005fb4:	d505      	bpl.n	8005fc2 <__sflush_r+0x46>
 8005fb6:	6863      	ldr	r3, [r4, #4]
 8005fb8:	1ac0      	subs	r0, r0, r3
 8005fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fbc:	b10b      	cbz	r3, 8005fc2 <__sflush_r+0x46>
 8005fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fc0:	1ac0      	subs	r0, r0, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc8:	6a21      	ldr	r1, [r4, #32]
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b0      	blx	r6
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	d106      	bne.n	8005fe2 <__sflush_r+0x66>
 8005fd4:	6829      	ldr	r1, [r5, #0]
 8005fd6:	291d      	cmp	r1, #29
 8005fd8:	d82c      	bhi.n	8006034 <__sflush_r+0xb8>
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <__sflush_r+0x108>)
 8005fdc:	40ca      	lsrs	r2, r1
 8005fde:	07d6      	lsls	r6, r2, #31
 8005fe0:	d528      	bpl.n	8006034 <__sflush_r+0xb8>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	6062      	str	r2, [r4, #4]
 8005fe6:	04d9      	lsls	r1, r3, #19
 8005fe8:	6922      	ldr	r2, [r4, #16]
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	d504      	bpl.n	8005ff8 <__sflush_r+0x7c>
 8005fee:	1c42      	adds	r2, r0, #1
 8005ff0:	d101      	bne.n	8005ff6 <__sflush_r+0x7a>
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	b903      	cbnz	r3, 8005ff8 <__sflush_r+0x7c>
 8005ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ffa:	602f      	str	r7, [r5, #0]
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d0ca      	beq.n	8005f96 <__sflush_r+0x1a>
 8006000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006004:	4299      	cmp	r1, r3
 8006006:	d002      	beq.n	800600e <__sflush_r+0x92>
 8006008:	4628      	mov	r0, r5
 800600a:	f000 f8fd 	bl	8006208 <_free_r>
 800600e:	2000      	movs	r0, #0
 8006010:	6360      	str	r0, [r4, #52]	; 0x34
 8006012:	e7c1      	b.n	8005f98 <__sflush_r+0x1c>
 8006014:	6a21      	ldr	r1, [r4, #32]
 8006016:	2301      	movs	r3, #1
 8006018:	4628      	mov	r0, r5
 800601a:	47b0      	blx	r6
 800601c:	1c41      	adds	r1, r0, #1
 800601e:	d1c7      	bne.n	8005fb0 <__sflush_r+0x34>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0c4      	beq.n	8005fb0 <__sflush_r+0x34>
 8006026:	2b1d      	cmp	r3, #29
 8006028:	d001      	beq.n	800602e <__sflush_r+0xb2>
 800602a:	2b16      	cmp	r3, #22
 800602c:	d101      	bne.n	8006032 <__sflush_r+0xb6>
 800602e:	602f      	str	r7, [r5, #0]
 8006030:	e7b1      	b.n	8005f96 <__sflush_r+0x1a>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	e7ad      	b.n	8005f98 <__sflush_r+0x1c>
 800603c:	690f      	ldr	r7, [r1, #16]
 800603e:	2f00      	cmp	r7, #0
 8006040:	d0a9      	beq.n	8005f96 <__sflush_r+0x1a>
 8006042:	0793      	lsls	r3, r2, #30
 8006044:	680e      	ldr	r6, [r1, #0]
 8006046:	bf08      	it	eq
 8006048:	694b      	ldreq	r3, [r1, #20]
 800604a:	600f      	str	r7, [r1, #0]
 800604c:	bf18      	it	ne
 800604e:	2300      	movne	r3, #0
 8006050:	eba6 0807 	sub.w	r8, r6, r7
 8006054:	608b      	str	r3, [r1, #8]
 8006056:	f1b8 0f00 	cmp.w	r8, #0
 800605a:	dd9c      	ble.n	8005f96 <__sflush_r+0x1a>
 800605c:	6a21      	ldr	r1, [r4, #32]
 800605e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006060:	4643      	mov	r3, r8
 8006062:	463a      	mov	r2, r7
 8006064:	4628      	mov	r0, r5
 8006066:	47b0      	blx	r6
 8006068:	2800      	cmp	r0, #0
 800606a:	dc06      	bgt.n	800607a <__sflush_r+0xfe>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006078:	e78e      	b.n	8005f98 <__sflush_r+0x1c>
 800607a:	4407      	add	r7, r0
 800607c:	eba8 0800 	sub.w	r8, r8, r0
 8006080:	e7e9      	b.n	8006056 <__sflush_r+0xda>
 8006082:	bf00      	nop
 8006084:	20400001 	.word	0x20400001

08006088 <_fflush_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	b913      	cbnz	r3, 8006098 <_fflush_r+0x10>
 8006092:	2500      	movs	r5, #0
 8006094:	4628      	mov	r0, r5
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	b118      	cbz	r0, 80060a2 <_fflush_r+0x1a>
 800609a:	6983      	ldr	r3, [r0, #24]
 800609c:	b90b      	cbnz	r3, 80060a2 <_fflush_r+0x1a>
 800609e:	f7ff fa15 	bl	80054cc <__sinit>
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <_fflush_r+0x6c>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d11b      	bne.n	80060e0 <_fflush_r+0x58>
 80060a8:	686c      	ldr	r4, [r5, #4]
 80060aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0ef      	beq.n	8006092 <_fflush_r+0xa>
 80060b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060b4:	07d0      	lsls	r0, r2, #31
 80060b6:	d404      	bmi.n	80060c2 <_fflush_r+0x3a>
 80060b8:	0599      	lsls	r1, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_fflush_r+0x3a>
 80060bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060be:	f7ff faa3 	bl	8005608 <__retarget_lock_acquire_recursive>
 80060c2:	4628      	mov	r0, r5
 80060c4:	4621      	mov	r1, r4
 80060c6:	f7ff ff59 	bl	8005f7c <__sflush_r>
 80060ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060cc:	07da      	lsls	r2, r3, #31
 80060ce:	4605      	mov	r5, r0
 80060d0:	d4e0      	bmi.n	8006094 <_fflush_r+0xc>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	059b      	lsls	r3, r3, #22
 80060d6:	d4dd      	bmi.n	8006094 <_fflush_r+0xc>
 80060d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060da:	f7ff fa96 	bl	800560a <__retarget_lock_release_recursive>
 80060de:	e7d9      	b.n	8006094 <_fflush_r+0xc>
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <_fflush_r+0x70>)
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d101      	bne.n	80060ea <_fflush_r+0x62>
 80060e6:	68ac      	ldr	r4, [r5, #8]
 80060e8:	e7df      	b.n	80060aa <_fflush_r+0x22>
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <_fflush_r+0x74>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	bf08      	it	eq
 80060f0:	68ec      	ldreq	r4, [r5, #12]
 80060f2:	e7da      	b.n	80060aa <_fflush_r+0x22>
 80060f4:	080063b4 	.word	0x080063b4
 80060f8:	080063d4 	.word	0x080063d4
 80060fc:	08006394 	.word	0x08006394

08006100 <_lseek_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	4d07      	ldr	r5, [pc, #28]	; (8006120 <_lseek_r+0x20>)
 8006104:	4604      	mov	r4, r0
 8006106:	4608      	mov	r0, r1
 8006108:	4611      	mov	r1, r2
 800610a:	2200      	movs	r2, #0
 800610c:	602a      	str	r2, [r5, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	f7fb f861 	bl	80011d6 <_lseek>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_lseek_r+0x1e>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_lseek_r+0x1e>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	2000078c 	.word	0x2000078c

08006124 <__swhatbuf_r>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	460e      	mov	r6, r1
 8006128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612c:	2900      	cmp	r1, #0
 800612e:	b096      	sub	sp, #88	; 0x58
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	da08      	bge.n	8006148 <__swhatbuf_r+0x24>
 8006136:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	061a      	lsls	r2, r3, #24
 8006140:	d410      	bmi.n	8006164 <__swhatbuf_r+0x40>
 8006142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006146:	e00e      	b.n	8006166 <__swhatbuf_r+0x42>
 8006148:	466a      	mov	r2, sp
 800614a:	f000 f8bb 	bl	80062c4 <_fstat_r>
 800614e:	2800      	cmp	r0, #0
 8006150:	dbf1      	blt.n	8006136 <__swhatbuf_r+0x12>
 8006152:	9a01      	ldr	r2, [sp, #4]
 8006154:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006158:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800615c:	425a      	negs	r2, r3
 800615e:	415a      	adcs	r2, r3
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	e7ee      	b.n	8006142 <__swhatbuf_r+0x1e>
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	2000      	movs	r0, #0
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	b016      	add	sp, #88	; 0x58
 800616c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006170 <__smakebuf_r>:
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006174:	079d      	lsls	r5, r3, #30
 8006176:	4606      	mov	r6, r0
 8006178:	460c      	mov	r4, r1
 800617a:	d507      	bpl.n	800618c <__smakebuf_r+0x1c>
 800617c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	2301      	movs	r3, #1
 8006186:	6163      	str	r3, [r4, #20]
 8006188:	b002      	add	sp, #8
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	ab01      	add	r3, sp, #4
 800618e:	466a      	mov	r2, sp
 8006190:	f7ff ffc8 	bl	8006124 <__swhatbuf_r>
 8006194:	9900      	ldr	r1, [sp, #0]
 8006196:	4605      	mov	r5, r0
 8006198:	4630      	mov	r0, r6
 800619a:	f7ff fa57 	bl	800564c <_malloc_r>
 800619e:	b948      	cbnz	r0, 80061b4 <__smakebuf_r+0x44>
 80061a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a4:	059a      	lsls	r2, r3, #22
 80061a6:	d4ef      	bmi.n	8006188 <__smakebuf_r+0x18>
 80061a8:	f023 0303 	bic.w	r3, r3, #3
 80061ac:	f043 0302 	orr.w	r3, r3, #2
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	e7e3      	b.n	800617c <__smakebuf_r+0xc>
 80061b4:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <__smakebuf_r+0x7c>)
 80061b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	6020      	str	r0, [r4, #0]
 80061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	9b00      	ldr	r3, [sp, #0]
 80061c4:	6163      	str	r3, [r4, #20]
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	6120      	str	r0, [r4, #16]
 80061ca:	b15b      	cbz	r3, 80061e4 <__smakebuf_r+0x74>
 80061cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d0:	4630      	mov	r0, r6
 80061d2:	f000 f889 	bl	80062e8 <_isatty_r>
 80061d6:	b128      	cbz	r0, 80061e4 <__smakebuf_r+0x74>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	89a0      	ldrh	r0, [r4, #12]
 80061e6:	4305      	orrs	r5, r0
 80061e8:	81a5      	strh	r5, [r4, #12]
 80061ea:	e7cd      	b.n	8006188 <__smakebuf_r+0x18>
 80061ec:	08005465 	.word	0x08005465

080061f0 <__malloc_lock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__malloc_lock+0x8>)
 80061f2:	f7ff ba09 	b.w	8005608 <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	20000781 	.word	0x20000781

080061fc <__malloc_unlock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__malloc_unlock+0x8>)
 80061fe:	f7ff ba04 	b.w	800560a <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	20000781 	.word	0x20000781

08006208 <_free_r>:
 8006208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800620a:	2900      	cmp	r1, #0
 800620c:	d044      	beq.n	8006298 <_free_r+0x90>
 800620e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006212:	9001      	str	r0, [sp, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f1a1 0404 	sub.w	r4, r1, #4
 800621a:	bfb8      	it	lt
 800621c:	18e4      	addlt	r4, r4, r3
 800621e:	f7ff ffe7 	bl	80061f0 <__malloc_lock>
 8006222:	4a1e      	ldr	r2, [pc, #120]	; (800629c <_free_r+0x94>)
 8006224:	9801      	ldr	r0, [sp, #4]
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	b933      	cbnz	r3, 8006238 <_free_r+0x30>
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	6014      	str	r4, [r2, #0]
 800622e:	b003      	add	sp, #12
 8006230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006234:	f7ff bfe2 	b.w	80061fc <__malloc_unlock>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d908      	bls.n	800624e <_free_r+0x46>
 800623c:	6825      	ldr	r5, [r4, #0]
 800623e:	1961      	adds	r1, r4, r5
 8006240:	428b      	cmp	r3, r1
 8006242:	bf01      	itttt	eq
 8006244:	6819      	ldreq	r1, [r3, #0]
 8006246:	685b      	ldreq	r3, [r3, #4]
 8006248:	1949      	addeq	r1, r1, r5
 800624a:	6021      	streq	r1, [r4, #0]
 800624c:	e7ed      	b.n	800622a <_free_r+0x22>
 800624e:	461a      	mov	r2, r3
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b10b      	cbz	r3, 8006258 <_free_r+0x50>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d9fa      	bls.n	800624e <_free_r+0x46>
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	1855      	adds	r5, r2, r1
 800625c:	42a5      	cmp	r5, r4
 800625e:	d10b      	bne.n	8006278 <_free_r+0x70>
 8006260:	6824      	ldr	r4, [r4, #0]
 8006262:	4421      	add	r1, r4
 8006264:	1854      	adds	r4, r2, r1
 8006266:	42a3      	cmp	r3, r4
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	d1e0      	bne.n	800622e <_free_r+0x26>
 800626c:	681c      	ldr	r4, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	6053      	str	r3, [r2, #4]
 8006272:	4421      	add	r1, r4
 8006274:	6011      	str	r1, [r2, #0]
 8006276:	e7da      	b.n	800622e <_free_r+0x26>
 8006278:	d902      	bls.n	8006280 <_free_r+0x78>
 800627a:	230c      	movs	r3, #12
 800627c:	6003      	str	r3, [r0, #0]
 800627e:	e7d6      	b.n	800622e <_free_r+0x26>
 8006280:	6825      	ldr	r5, [r4, #0]
 8006282:	1961      	adds	r1, r4, r5
 8006284:	428b      	cmp	r3, r1
 8006286:	bf04      	itt	eq
 8006288:	6819      	ldreq	r1, [r3, #0]
 800628a:	685b      	ldreq	r3, [r3, #4]
 800628c:	6063      	str	r3, [r4, #4]
 800628e:	bf04      	itt	eq
 8006290:	1949      	addeq	r1, r1, r5
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	6054      	str	r4, [r2, #4]
 8006296:	e7ca      	b.n	800622e <_free_r+0x26>
 8006298:	b003      	add	sp, #12
 800629a:	bd30      	pop	{r4, r5, pc}
 800629c:	20000784 	.word	0x20000784

080062a0 <_read_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d07      	ldr	r5, [pc, #28]	; (80062c0 <_read_r+0x20>)
 80062a4:	4604      	mov	r4, r0
 80062a6:	4608      	mov	r0, r1
 80062a8:	4611      	mov	r1, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	602a      	str	r2, [r5, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7ff f82c 	bl	800530c <_read>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_read_r+0x1e>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_read_r+0x1e>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	2000078c 	.word	0x2000078c

080062c4 <_fstat_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	; (80062e4 <_fstat_r+0x20>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	f7fa ff65 	bl	80011a0 <_fstat>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d102      	bne.n	80062e0 <_fstat_r+0x1c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	b103      	cbz	r3, 80062e0 <_fstat_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	2000078c 	.word	0x2000078c

080062e8 <_isatty_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	; (8006304 <_isatty_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fa ff64 	bl	80011c0 <_isatty>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_isatty_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_isatty_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	2000078c 	.word	0x2000078c

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
